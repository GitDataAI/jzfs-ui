// tslint:disable
/**
 * JZConsole
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


// @ts-ignore
import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Change } from '../models';
// @ts-ignore
import { FullTreeEntry } from '../models';
// @ts-ignore
import { RefType } from '../models';
/**
 * CommitApi - axios parameter creator
 * @export
 */
export const CommitApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary compare two commit
         * @param {string} owner 
         * @param {string} repository 
         * @param {string} basehead 
         * @param {string} [path] specific path, if not specific return entries in root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        compareCommit: async (owner: string, repository: string, basehead: string, path?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling compareCommit.');
            }
            // verify required parameter 'repository' is not null or undefined
            if (repository === null || repository === undefined) {
                throw new RequiredError('repository','Required parameter repository was null or undefined when calling compareCommit.');
            }
            // verify required parameter 'basehead' is not null or undefined
            if (basehead === null || basehead === undefined) {
                throw new RequiredError('basehead','Required parameter basehead was null or undefined when calling compareCommit.');
            }
            const localVarPath = `/repos/{owner}/{repository}/compare/{basehead}`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"repository"}}`, encodeURIComponent(String(repository)))
                .replace(`{${"basehead"}}`, encodeURIComponent(String(basehead)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary compare two commit
         * @param {string} owner 
         * @param {string} repository 
         * @param {string} basehead 
         * @param {string} [path] specific path, if not specific return entries in root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        compareCommit_1: async (owner: string, repository: string, basehead: string, path?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling compareCommit_1.');
            }
            // verify required parameter 'repository' is not null or undefined
            if (repository === null || repository === undefined) {
                throw new RequiredError('repository','Required parameter repository was null or undefined when calling compareCommit_1.');
            }
            // verify required parameter 'basehead' is not null or undefined
            if (basehead === null || basehead === undefined) {
                throw new RequiredError('basehead','Required parameter basehead was null or undefined when calling compareCommit_1.');
            }
            const localVarPath = `/repos/{owner}/{repository}/compare/{basehead}`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"repository"}}`, encodeURIComponent(String(repository)))
                .replace(`{${"basehead"}}`, encodeURIComponent(String(basehead)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get changes in commit
         * @param {string} owner 
         * @param {string} repository 
         * @param {string} commitId 
         * @param {string} [path] specific path, if not specific return entries in root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCommitChanges: async (owner: string, repository: string, commitId: string, path?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling getCommitChanges.');
            }
            // verify required parameter 'repository' is not null or undefined
            if (repository === null || repository === undefined) {
                throw new RequiredError('repository','Required parameter repository was null or undefined when calling getCommitChanges.');
            }
            // verify required parameter 'commitId' is not null or undefined
            if (commitId === null || commitId === undefined) {
                throw new RequiredError('commitId','Required parameter commitId was null or undefined when calling getCommitChanges.');
            }
            const localVarPath = `/repos/{owner}/{repository}/changes/{commit_id}`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"repository"}}`, encodeURIComponent(String(repository)))
                .replace(`{${"commit_id"}}`, encodeURIComponent(String(commitId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get changes in commit
         * @param {string} owner 
         * @param {string} repository 
         * @param {string} commitId 
         * @param {string} [path] specific path, if not specific return entries in root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCommitChanges_2: async (owner: string, repository: string, commitId: string, path?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling getCommitChanges_2.');
            }
            // verify required parameter 'repository' is not null or undefined
            if (repository === null || repository === undefined) {
                throw new RequiredError('repository','Required parameter repository was null or undefined when calling getCommitChanges_2.');
            }
            // verify required parameter 'commitId' is not null or undefined
            if (commitId === null || commitId === undefined) {
                throw new RequiredError('commitId','Required parameter commitId was null or undefined when calling getCommitChanges_2.');
            }
            const localVarPath = `/repos/{owner}/{repository}/changes/{commit_id}`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"repository"}}`, encodeURIComponent(String(repository)))
                .replace(`{${"commit_id"}}`, encodeURIComponent(String(commitId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary list entries in ref
         * @param {string} owner 
         * @param {string} repository 
         * @param {RefType} type type indicate to retrieve from wip/branch/tag/commit, default branch
         * @param {string} [path] specific path, if not specific return entries in root
         * @param {string} [ref] specific( ref name, tag name, commit hash), for wip and branchm, branch name default to repository default branch(HEAD),
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntriesInRef: async (owner: string, repository: string, type: RefType, path?: string, ref?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling getEntriesInRef.');
            }
            // verify required parameter 'repository' is not null or undefined
            if (repository === null || repository === undefined) {
                throw new RequiredError('repository','Required parameter repository was null or undefined when calling getEntriesInRef.');
            }
            // verify required parameter 'type' is not null or undefined
            if (type === null || type === undefined) {
                throw new RequiredError('type','Required parameter type was null or undefined when calling getEntriesInRef.');
            }
            const localVarPath = `/repos/{owner}/{repository}/contents`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"repository"}}`, encodeURIComponent(String(repository)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }

            if (ref !== undefined) {
                localVarQueryParameter['ref'] = ref;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary list entries in ref
         * @param {string} owner 
         * @param {string} repository 
         * @param {RefType} type type indicate to retrieve from wip/branch/tag/commit, default branch
         * @param {string} [path] specific path, if not specific return entries in root
         * @param {string} [ref] specific( ref name, tag name, commit hash), for wip and branchm, branch name default to repository default branch(HEAD),
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntriesInRef_3: async (owner: string, repository: string, type: RefType, path?: string, ref?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling getEntriesInRef_3.');
            }
            // verify required parameter 'repository' is not null or undefined
            if (repository === null || repository === undefined) {
                throw new RequiredError('repository','Required parameter repository was null or undefined when calling getEntriesInRef_3.');
            }
            // verify required parameter 'type' is not null or undefined
            if (type === null || type === undefined) {
                throw new RequiredError('type','Required parameter type was null or undefined when calling getEntriesInRef_3.');
            }
            const localVarPath = `/repos/{owner}/{repository}/contents`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"repository"}}`, encodeURIComponent(String(repository)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }

            if (ref !== undefined) {
                localVarQueryParameter['ref'] = ref;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CommitApi - functional programming interface
 * @export
 */
export const CommitApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary compare two commit
         * @param {string} owner 
         * @param {string} repository 
         * @param {string} basehead 
         * @param {string} [path] specific path, if not specific return entries in root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async compareCommit(owner: string, repository: string, basehead: string, path?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Change>>> {
            const localVarAxiosArgs = await CommitApiAxiosParamCreator(configuration).compareCommit(owner, repository, basehead, path, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary compare two commit
         * @param {string} owner 
         * @param {string} repository 
         * @param {string} basehead 
         * @param {string} [path] specific path, if not specific return entries in root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async compareCommit_1(owner: string, repository: string, basehead: string, path?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Change>>> {
            const localVarAxiosArgs = await CommitApiAxiosParamCreator(configuration).compareCommit_1(owner, repository, basehead, path, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary get changes in commit
         * @param {string} owner 
         * @param {string} repository 
         * @param {string} commitId 
         * @param {string} [path] specific path, if not specific return entries in root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCommitChanges(owner: string, repository: string, commitId: string, path?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Change>>> {
            const localVarAxiosArgs = await CommitApiAxiosParamCreator(configuration).getCommitChanges(owner, repository, commitId, path, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary get changes in commit
         * @param {string} owner 
         * @param {string} repository 
         * @param {string} commitId 
         * @param {string} [path] specific path, if not specific return entries in root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCommitChanges_2(owner: string, repository: string, commitId: string, path?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Change>>> {
            const localVarAxiosArgs = await CommitApiAxiosParamCreator(configuration).getCommitChanges_2(owner, repository, commitId, path, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary list entries in ref
         * @param {string} owner 
         * @param {string} repository 
         * @param {RefType} type type indicate to retrieve from wip/branch/tag/commit, default branch
         * @param {string} [path] specific path, if not specific return entries in root
         * @param {string} [ref] specific( ref name, tag name, commit hash), for wip and branchm, branch name default to repository default branch(HEAD),
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEntriesInRef(owner: string, repository: string, type: RefType, path?: string, ref?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FullTreeEntry>>> {
            const localVarAxiosArgs = await CommitApiAxiosParamCreator(configuration).getEntriesInRef(owner, repository, type, path, ref, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary list entries in ref
         * @param {string} owner 
         * @param {string} repository 
         * @param {RefType} type type indicate to retrieve from wip/branch/tag/commit, default branch
         * @param {string} [path] specific path, if not specific return entries in root
         * @param {string} [ref] specific( ref name, tag name, commit hash), for wip and branchm, branch name default to repository default branch(HEAD),
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getEntriesInRef_3(owner: string, repository: string, type: RefType, path?: string, ref?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FullTreeEntry>>> {
            const localVarAxiosArgs = await CommitApiAxiosParamCreator(configuration).getEntriesInRef_3(owner, repository, type, path, ref, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * CommitApi - factory interface
 * @export
 */
export const CommitApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary compare two commit
         * @param {string} owner 
         * @param {string} repository 
         * @param {string} basehead 
         * @param {string} [path] specific path, if not specific return entries in root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        compareCommit(owner: string, repository: string, basehead: string, path?: string, options?: any): AxiosPromise<Array<Change>> {
            return CommitApiFp(configuration).compareCommit(owner, repository, basehead, path, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary compare two commit
         * @param {string} owner 
         * @param {string} repository 
         * @param {string} basehead 
         * @param {string} [path] specific path, if not specific return entries in root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        compareCommit_1(owner: string, repository: string, basehead: string, path?: string, options?: any): AxiosPromise<Array<Change>> {
            return CommitApiFp(configuration).compareCommit_1(owner, repository, basehead, path, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get changes in commit
         * @param {string} owner 
         * @param {string} repository 
         * @param {string} commitId 
         * @param {string} [path] specific path, if not specific return entries in root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCommitChanges(owner: string, repository: string, commitId: string, path?: string, options?: any): AxiosPromise<Array<Change>> {
            return CommitApiFp(configuration).getCommitChanges(owner, repository, commitId, path, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get changes in commit
         * @param {string} owner 
         * @param {string} repository 
         * @param {string} commitId 
         * @param {string} [path] specific path, if not specific return entries in root
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCommitChanges_2(owner: string, repository: string, commitId: string, path?: string, options?: any): AxiosPromise<Array<Change>> {
            return CommitApiFp(configuration).getCommitChanges_2(owner, repository, commitId, path, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary list entries in ref
         * @param {string} owner 
         * @param {string} repository 
         * @param {RefType} type type indicate to retrieve from wip/branch/tag/commit, default branch
         * @param {string} [path] specific path, if not specific return entries in root
         * @param {string} [ref] specific( ref name, tag name, commit hash), for wip and branchm, branch name default to repository default branch(HEAD),
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntriesInRef(owner: string, repository: string, type: RefType, path?: string, ref?: string, options?: any): AxiosPromise<Array<FullTreeEntry>> {
            return CommitApiFp(configuration).getEntriesInRef(owner, repository, type, path, ref, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary list entries in ref
         * @param {string} owner 
         * @param {string} repository 
         * @param {RefType} type type indicate to retrieve from wip/branch/tag/commit, default branch
         * @param {string} [path] specific path, if not specific return entries in root
         * @param {string} [ref] specific( ref name, tag name, commit hash), for wip and branchm, branch name default to repository default branch(HEAD),
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getEntriesInRef_3(owner: string, repository: string, type: RefType, path?: string, ref?: string, options?: any): AxiosPromise<Array<FullTreeEntry>> {
            return CommitApiFp(configuration).getEntriesInRef_3(owner, repository, type, path, ref, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CommitApi - object-oriented interface
 * @export
 * @class CommitApi
 * @extends {BaseAPI}
 */
export class CommitApi extends BaseAPI {
    /**
     * 
     * @summary compare two commit
     * @param {string} owner 
     * @param {string} repository 
     * @param {string} basehead 
     * @param {string} [path] specific path, if not specific return entries in root
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommitApi
     */
    public compareCommit(owner: string, repository: string, basehead: string, path?: string, options?: any) {
        return CommitApiFp(this.configuration).compareCommit(owner, repository, basehead, path, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary compare two commit
     * @param {string} owner 
     * @param {string} repository 
     * @param {string} basehead 
     * @param {string} [path] specific path, if not specific return entries in root
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommitApi
     */
    public compareCommit_1(owner: string, repository: string, basehead: string, path?: string, options?: any) {
        return CommitApiFp(this.configuration).compareCommit_1(owner, repository, basehead, path, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get changes in commit
     * @param {string} owner 
     * @param {string} repository 
     * @param {string} commitId 
     * @param {string} [path] specific path, if not specific return entries in root
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommitApi
     */
    public getCommitChanges(owner: string, repository: string, commitId: string, path?: string, options?: any) {
        return CommitApiFp(this.configuration).getCommitChanges(owner, repository, commitId, path, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get changes in commit
     * @param {string} owner 
     * @param {string} repository 
     * @param {string} commitId 
     * @param {string} [path] specific path, if not specific return entries in root
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommitApi
     */
    public getCommitChanges_2(owner: string, repository: string, commitId: string, path?: string, options?: any) {
        return CommitApiFp(this.configuration).getCommitChanges_2(owner, repository, commitId, path, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary list entries in ref
     * @param {string} owner 
     * @param {string} repository 
     * @param {RefType} type type indicate to retrieve from wip/branch/tag/commit, default branch
     * @param {string} [path] specific path, if not specific return entries in root
     * @param {string} [ref] specific( ref name, tag name, commit hash), for wip and branchm, branch name default to repository default branch(HEAD),
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommitApi
     */
    public getEntriesInRef(owner: string, repository: string, type: RefType, path?: string, ref?: string, options?: any) {
        return CommitApiFp(this.configuration).getEntriesInRef(owner, repository, type, path, ref, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary list entries in ref
     * @param {string} owner 
     * @param {string} repository 
     * @param {RefType} type type indicate to retrieve from wip/branch/tag/commit, default branch
     * @param {string} [path] specific path, if not specific return entries in root
     * @param {string} [ref] specific( ref name, tag name, commit hash), for wip and branchm, branch name default to repository default branch(HEAD),
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CommitApi
     */
    public getEntriesInRef_3(owner: string, repository: string, type: RefType, path?: string, ref?: string, options?: any) {
        return CommitApiFp(this.configuration).getEntriesInRef_3(owner, repository, type, path, ref, options).then((request) => request(this.axios, this.basePath));
    }

}
