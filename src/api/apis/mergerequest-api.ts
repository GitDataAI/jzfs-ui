// tslint:disable
/**
 * JZConsole
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


// @ts-ignore
import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Commit } from '../models';
// @ts-ignore
import { CreateMergeRequest } from '../models';
// @ts-ignore
import { MergeMergeRequest } from '../models';
// @ts-ignore
import { MergeRequest } from '../models';
// @ts-ignore
import { MergeRequestFullState } from '../models';
// @ts-ignore
import { MergeRequestList } from '../models';
// @ts-ignore
import { UpdateMergeRequest } from '../models';
/**
 * MergerequestApi - axios parameter creator
 * @export
 */
export const MergerequestApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary create merge request
         * @param {string} owner 
         * @param {string} repository 
         * @param {CreateMergeRequest} [createMergeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMergeRequest: async (owner: string, repository: string, createMergeRequest?: CreateMergeRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling createMergeRequest.');
            }
            // verify required parameter 'repository' is not null or undefined
            if (repository === null || repository === undefined) {
                throw new RequiredError('repository','Required parameter repository was null or undefined when calling createMergeRequest.');
            }
            const localVarPath = `/repos/{owner}/{repository}/mergerequest`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"repository"}}`, encodeURIComponent(String(repository)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof createMergeRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(createMergeRequest !== undefined ? createMergeRequest : {}) : (createMergeRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary create merge request
         * @param {string} owner 
         * @param {string} repository 
         * @param {CreateMergeRequest} [createMergeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMergeRequest_1: async (owner: string, repository: string, createMergeRequest?: CreateMergeRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling createMergeRequest_1.');
            }
            // verify required parameter 'repository' is not null or undefined
            if (repository === null || repository === undefined) {
                throw new RequiredError('repository','Required parameter repository was null or undefined when calling createMergeRequest_1.');
            }
            const localVarPath = `/repos/{owner}/{repository}/mergerequest`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"repository"}}`, encodeURIComponent(String(repository)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof createMergeRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(createMergeRequest !== undefined ? createMergeRequest : {}) : (createMergeRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get merge request
         * @param {string} owner 
         * @param {string} repository 
         * @param {string} mrSeq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMergeRequest: async (owner: string, repository: string, mrSeq: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling getMergeRequest.');
            }
            // verify required parameter 'repository' is not null or undefined
            if (repository === null || repository === undefined) {
                throw new RequiredError('repository','Required parameter repository was null or undefined when calling getMergeRequest.');
            }
            // verify required parameter 'mrSeq' is not null or undefined
            if (mrSeq === null || mrSeq === undefined) {
                throw new RequiredError('mrSeq','Required parameter mrSeq was null or undefined when calling getMergeRequest.');
            }
            const localVarPath = `/repos/{owner}/{repository}/mergerequest/{mrSeq}`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"repository"}}`, encodeURIComponent(String(repository)))
                .replace(`{${"mrSeq"}}`, encodeURIComponent(String(mrSeq)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get merge request
         * @param {string} owner 
         * @param {string} repository 
         * @param {string} mrSeq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMergeRequest_2: async (owner: string, repository: string, mrSeq: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling getMergeRequest_2.');
            }
            // verify required parameter 'repository' is not null or undefined
            if (repository === null || repository === undefined) {
                throw new RequiredError('repository','Required parameter repository was null or undefined when calling getMergeRequest_2.');
            }
            // verify required parameter 'mrSeq' is not null or undefined
            if (mrSeq === null || mrSeq === undefined) {
                throw new RequiredError('mrSeq','Required parameter mrSeq was null or undefined when calling getMergeRequest_2.');
            }
            const localVarPath = `/repos/{owner}/{repository}/mergerequest/{mrSeq}`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"repository"}}`, encodeURIComponent(String(repository)))
                .replace(`{${"mrSeq"}}`, encodeURIComponent(String(mrSeq)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get list of merge request in repository
         * @param {string} owner 
         * @param {string} repository 
         * @param {number} [after] return items after this value
         * @param {number} [amount] how many items to return
         * @param {number} [state] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMergeRequests: async (owner: string, repository: string, after?: number, amount?: number, state?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling listMergeRequests.');
            }
            // verify required parameter 'repository' is not null or undefined
            if (repository === null || repository === undefined) {
                throw new RequiredError('repository','Required parameter repository was null or undefined when calling listMergeRequests.');
            }
            const localVarPath = `/repos/{owner}/{repository}/mergerequest`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"repository"}}`, encodeURIComponent(String(repository)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (after !== undefined) {
                localVarQueryParameter['after'] = after;
            }

            if (amount !== undefined) {
                localVarQueryParameter['amount'] = amount;
            }

            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get list of merge request in repository
         * @param {string} owner 
         * @param {string} repository 
         * @param {number} [after] return items after this value
         * @param {number} [amount] how many items to return
         * @param {number} [state] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMergeRequests_3: async (owner: string, repository: string, after?: number, amount?: number, state?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling listMergeRequests_3.');
            }
            // verify required parameter 'repository' is not null or undefined
            if (repository === null || repository === undefined) {
                throw new RequiredError('repository','Required parameter repository was null or undefined when calling listMergeRequests_3.');
            }
            const localVarPath = `/repos/{owner}/{repository}/mergerequest`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"repository"}}`, encodeURIComponent(String(repository)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (after !== undefined) {
                localVarQueryParameter['after'] = after;
            }

            if (amount !== undefined) {
                localVarQueryParameter['amount'] = amount;
            }

            if (state !== undefined) {
                localVarQueryParameter['state'] = state;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary merge a mergerequest
         * @param {string} owner 
         * @param {string} repository 
         * @param {string} mrSeq 
         * @param {MergeMergeRequest} [mergeMergeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        merge: async (owner: string, repository: string, mrSeq: string, mergeMergeRequest?: MergeMergeRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling merge.');
            }
            // verify required parameter 'repository' is not null or undefined
            if (repository === null || repository === undefined) {
                throw new RequiredError('repository','Required parameter repository was null or undefined when calling merge.');
            }
            // verify required parameter 'mrSeq' is not null or undefined
            if (mrSeq === null || mrSeq === undefined) {
                throw new RequiredError('mrSeq','Required parameter mrSeq was null or undefined when calling merge.');
            }
            const localVarPath = `/repos/{owner}/{repository}/mergerequest/{mrSeq}/merge`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"repository"}}`, encodeURIComponent(String(repository)))
                .replace(`{${"mrSeq"}}`, encodeURIComponent(String(mrSeq)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof mergeMergeRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(mergeMergeRequest !== undefined ? mergeMergeRequest : {}) : (mergeMergeRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary merge a mergerequest
         * @param {string} owner 
         * @param {string} repository 
         * @param {string} mrSeq 
         * @param {MergeMergeRequest} [mergeMergeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        merge_4: async (owner: string, repository: string, mrSeq: string, mergeMergeRequest?: MergeMergeRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling merge_4.');
            }
            // verify required parameter 'repository' is not null or undefined
            if (repository === null || repository === undefined) {
                throw new RequiredError('repository','Required parameter repository was null or undefined when calling merge_4.');
            }
            // verify required parameter 'mrSeq' is not null or undefined
            if (mrSeq === null || mrSeq === undefined) {
                throw new RequiredError('mrSeq','Required parameter mrSeq was null or undefined when calling merge_4.');
            }
            const localVarPath = `/repos/{owner}/{repository}/mergerequest/{mrSeq}/merge`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"repository"}}`, encodeURIComponent(String(repository)))
                .replace(`{${"mrSeq"}}`, encodeURIComponent(String(mrSeq)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof mergeMergeRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(mergeMergeRequest !== undefined ? mergeMergeRequest : {}) : (mergeMergeRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary update merge request
         * @param {string} owner 
         * @param {string} repository 
         * @param {string} mrSeq 
         * @param {UpdateMergeRequest} [updateMergeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMergeRequest: async (owner: string, repository: string, mrSeq: string, updateMergeRequest?: UpdateMergeRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling updateMergeRequest.');
            }
            // verify required parameter 'repository' is not null or undefined
            if (repository === null || repository === undefined) {
                throw new RequiredError('repository','Required parameter repository was null or undefined when calling updateMergeRequest.');
            }
            // verify required parameter 'mrSeq' is not null or undefined
            if (mrSeq === null || mrSeq === undefined) {
                throw new RequiredError('mrSeq','Required parameter mrSeq was null or undefined when calling updateMergeRequest.');
            }
            const localVarPath = `/repos/{owner}/{repository}/mergerequest/{mrSeq}`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"repository"}}`, encodeURIComponent(String(repository)))
                .replace(`{${"mrSeq"}}`, encodeURIComponent(String(mrSeq)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof updateMergeRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(updateMergeRequest !== undefined ? updateMergeRequest : {}) : (updateMergeRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary update merge request
         * @param {string} owner 
         * @param {string} repository 
         * @param {string} mrSeq 
         * @param {UpdateMergeRequest} [updateMergeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMergeRequest_5: async (owner: string, repository: string, mrSeq: string, updateMergeRequest?: UpdateMergeRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling updateMergeRequest_5.');
            }
            // verify required parameter 'repository' is not null or undefined
            if (repository === null || repository === undefined) {
                throw new RequiredError('repository','Required parameter repository was null or undefined when calling updateMergeRequest_5.');
            }
            // verify required parameter 'mrSeq' is not null or undefined
            if (mrSeq === null || mrSeq === undefined) {
                throw new RequiredError('mrSeq','Required parameter mrSeq was null or undefined when calling updateMergeRequest_5.');
            }
            const localVarPath = `/repos/{owner}/{repository}/mergerequest/{mrSeq}`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"repository"}}`, encodeURIComponent(String(repository)))
                .replace(`{${"mrSeq"}}`, encodeURIComponent(String(mrSeq)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof updateMergeRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(updateMergeRequest !== undefined ? updateMergeRequest : {}) : (updateMergeRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * MergerequestApi - functional programming interface
 * @export
 */
export const MergerequestApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary create merge request
         * @param {string} owner 
         * @param {string} repository 
         * @param {CreateMergeRequest} [createMergeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMergeRequest(owner: string, repository: string, createMergeRequest?: CreateMergeRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MergeRequest>> {
            const localVarAxiosArgs = await MergerequestApiAxiosParamCreator(configuration).createMergeRequest(owner, repository, createMergeRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary create merge request
         * @param {string} owner 
         * @param {string} repository 
         * @param {CreateMergeRequest} [createMergeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createMergeRequest_1(owner: string, repository: string, createMergeRequest?: CreateMergeRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MergeRequest>> {
            const localVarAxiosArgs = await MergerequestApiAxiosParamCreator(configuration).createMergeRequest_1(owner, repository, createMergeRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary get merge request
         * @param {string} owner 
         * @param {string} repository 
         * @param {string} mrSeq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMergeRequest(owner: string, repository: string, mrSeq: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MergeRequestFullState>> {
            const localVarAxiosArgs = await MergerequestApiAxiosParamCreator(configuration).getMergeRequest(owner, repository, mrSeq, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary get merge request
         * @param {string} owner 
         * @param {string} repository 
         * @param {string} mrSeq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMergeRequest_2(owner: string, repository: string, mrSeq: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MergeRequestFullState>> {
            const localVarAxiosArgs = await MergerequestApiAxiosParamCreator(configuration).getMergeRequest_2(owner, repository, mrSeq, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary get list of merge request in repository
         * @param {string} owner 
         * @param {string} repository 
         * @param {number} [after] return items after this value
         * @param {number} [amount] how many items to return
         * @param {number} [state] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listMergeRequests(owner: string, repository: string, after?: number, amount?: number, state?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MergeRequestList>> {
            const localVarAxiosArgs = await MergerequestApiAxiosParamCreator(configuration).listMergeRequests(owner, repository, after, amount, state, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary get list of merge request in repository
         * @param {string} owner 
         * @param {string} repository 
         * @param {number} [after] return items after this value
         * @param {number} [amount] how many items to return
         * @param {number} [state] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listMergeRequests_3(owner: string, repository: string, after?: number, amount?: number, state?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MergeRequestList>> {
            const localVarAxiosArgs = await MergerequestApiAxiosParamCreator(configuration).listMergeRequests_3(owner, repository, after, amount, state, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary merge a mergerequest
         * @param {string} owner 
         * @param {string} repository 
         * @param {string} mrSeq 
         * @param {MergeMergeRequest} [mergeMergeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async merge(owner: string, repository: string, mrSeq: string, mergeMergeRequest?: MergeMergeRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Commit>>> {
            const localVarAxiosArgs = await MergerequestApiAxiosParamCreator(configuration).merge(owner, repository, mrSeq, mergeMergeRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary merge a mergerequest
         * @param {string} owner 
         * @param {string} repository 
         * @param {string} mrSeq 
         * @param {MergeMergeRequest} [mergeMergeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async merge_4(owner: string, repository: string, mrSeq: string, mergeMergeRequest?: MergeMergeRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Commit>>> {
            const localVarAxiosArgs = await MergerequestApiAxiosParamCreator(configuration).merge_4(owner, repository, mrSeq, mergeMergeRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary update merge request
         * @param {string} owner 
         * @param {string} repository 
         * @param {string} mrSeq 
         * @param {UpdateMergeRequest} [updateMergeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMergeRequest(owner: string, repository: string, mrSeq: string, updateMergeRequest?: UpdateMergeRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await MergerequestApiAxiosParamCreator(configuration).updateMergeRequest(owner, repository, mrSeq, updateMergeRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary update merge request
         * @param {string} owner 
         * @param {string} repository 
         * @param {string} mrSeq 
         * @param {UpdateMergeRequest} [updateMergeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateMergeRequest_5(owner: string, repository: string, mrSeq: string, updateMergeRequest?: UpdateMergeRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await MergerequestApiAxiosParamCreator(configuration).updateMergeRequest_5(owner, repository, mrSeq, updateMergeRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * MergerequestApi - factory interface
 * @export
 */
export const MergerequestApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary create merge request
         * @param {string} owner 
         * @param {string} repository 
         * @param {CreateMergeRequest} [createMergeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMergeRequest(owner: string, repository: string, createMergeRequest?: CreateMergeRequest, options?: any): AxiosPromise<MergeRequest> {
            return MergerequestApiFp(configuration).createMergeRequest(owner, repository, createMergeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary create merge request
         * @param {string} owner 
         * @param {string} repository 
         * @param {CreateMergeRequest} [createMergeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createMergeRequest_1(owner: string, repository: string, createMergeRequest?: CreateMergeRequest, options?: any): AxiosPromise<MergeRequest> {
            return MergerequestApiFp(configuration).createMergeRequest_1(owner, repository, createMergeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get merge request
         * @param {string} owner 
         * @param {string} repository 
         * @param {string} mrSeq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMergeRequest(owner: string, repository: string, mrSeq: string, options?: any): AxiosPromise<MergeRequestFullState> {
            return MergerequestApiFp(configuration).getMergeRequest(owner, repository, mrSeq, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get merge request
         * @param {string} owner 
         * @param {string} repository 
         * @param {string} mrSeq 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMergeRequest_2(owner: string, repository: string, mrSeq: string, options?: any): AxiosPromise<MergeRequestFullState> {
            return MergerequestApiFp(configuration).getMergeRequest_2(owner, repository, mrSeq, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get list of merge request in repository
         * @param {string} owner 
         * @param {string} repository 
         * @param {number} [after] return items after this value
         * @param {number} [amount] how many items to return
         * @param {number} [state] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMergeRequests(owner: string, repository: string, after?: number, amount?: number, state?: number, options?: any): AxiosPromise<MergeRequestList> {
            return MergerequestApiFp(configuration).listMergeRequests(owner, repository, after, amount, state, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get list of merge request in repository
         * @param {string} owner 
         * @param {string} repository 
         * @param {number} [after] return items after this value
         * @param {number} [amount] how many items to return
         * @param {number} [state] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listMergeRequests_3(owner: string, repository: string, after?: number, amount?: number, state?: number, options?: any): AxiosPromise<MergeRequestList> {
            return MergerequestApiFp(configuration).listMergeRequests_3(owner, repository, after, amount, state, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary merge a mergerequest
         * @param {string} owner 
         * @param {string} repository 
         * @param {string} mrSeq 
         * @param {MergeMergeRequest} [mergeMergeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        merge(owner: string, repository: string, mrSeq: string, mergeMergeRequest?: MergeMergeRequest, options?: any): AxiosPromise<Array<Commit>> {
            return MergerequestApiFp(configuration).merge(owner, repository, mrSeq, mergeMergeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary merge a mergerequest
         * @param {string} owner 
         * @param {string} repository 
         * @param {string} mrSeq 
         * @param {MergeMergeRequest} [mergeMergeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        merge_4(owner: string, repository: string, mrSeq: string, mergeMergeRequest?: MergeMergeRequest, options?: any): AxiosPromise<Array<Commit>> {
            return MergerequestApiFp(configuration).merge_4(owner, repository, mrSeq, mergeMergeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary update merge request
         * @param {string} owner 
         * @param {string} repository 
         * @param {string} mrSeq 
         * @param {UpdateMergeRequest} [updateMergeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMergeRequest(owner: string, repository: string, mrSeq: string, updateMergeRequest?: UpdateMergeRequest, options?: any): AxiosPromise<object> {
            return MergerequestApiFp(configuration).updateMergeRequest(owner, repository, mrSeq, updateMergeRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary update merge request
         * @param {string} owner 
         * @param {string} repository 
         * @param {string} mrSeq 
         * @param {UpdateMergeRequest} [updateMergeRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateMergeRequest_5(owner: string, repository: string, mrSeq: string, updateMergeRequest?: UpdateMergeRequest, options?: any): AxiosPromise<object> {
            return MergerequestApiFp(configuration).updateMergeRequest_5(owner, repository, mrSeq, updateMergeRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * MergerequestApi - object-oriented interface
 * @export
 * @class MergerequestApi
 * @extends {BaseAPI}
 */
export class MergerequestApi extends BaseAPI {
    /**
     * 
     * @summary create merge request
     * @param {string} owner 
     * @param {string} repository 
     * @param {CreateMergeRequest} [createMergeRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MergerequestApi
     */
    public createMergeRequest(owner: string, repository: string, createMergeRequest?: CreateMergeRequest, options?: any) {
        return MergerequestApiFp(this.configuration).createMergeRequest(owner, repository, createMergeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary create merge request
     * @param {string} owner 
     * @param {string} repository 
     * @param {CreateMergeRequest} [createMergeRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MergerequestApi
     */
    public createMergeRequest_1(owner: string, repository: string, createMergeRequest?: CreateMergeRequest, options?: any) {
        return MergerequestApiFp(this.configuration).createMergeRequest_1(owner, repository, createMergeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get merge request
     * @param {string} owner 
     * @param {string} repository 
     * @param {string} mrSeq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MergerequestApi
     */
    public getMergeRequest(owner: string, repository: string, mrSeq: string, options?: any) {
        return MergerequestApiFp(this.configuration).getMergeRequest(owner, repository, mrSeq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get merge request
     * @param {string} owner 
     * @param {string} repository 
     * @param {string} mrSeq 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MergerequestApi
     */
    public getMergeRequest_2(owner: string, repository: string, mrSeq: string, options?: any) {
        return MergerequestApiFp(this.configuration).getMergeRequest_2(owner, repository, mrSeq, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get list of merge request in repository
     * @param {string} owner 
     * @param {string} repository 
     * @param {number} [after] return items after this value
     * @param {number} [amount] how many items to return
     * @param {number} [state] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MergerequestApi
     */
    public listMergeRequests(owner: string, repository: string, after?: number, amount?: number, state?: number, options?: any) {
        return MergerequestApiFp(this.configuration).listMergeRequests(owner, repository, after, amount, state, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get list of merge request in repository
     * @param {string} owner 
     * @param {string} repository 
     * @param {number} [after] return items after this value
     * @param {number} [amount] how many items to return
     * @param {number} [state] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MergerequestApi
     */
    public listMergeRequests_3(owner: string, repository: string, after?: number, amount?: number, state?: number, options?: any) {
        return MergerequestApiFp(this.configuration).listMergeRequests_3(owner, repository, after, amount, state, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary merge a mergerequest
     * @param {string} owner 
     * @param {string} repository 
     * @param {string} mrSeq 
     * @param {MergeMergeRequest} [mergeMergeRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MergerequestApi
     */
    public merge(owner: string, repository: string, mrSeq: string, mergeMergeRequest?: MergeMergeRequest, options?: any) {
        return MergerequestApiFp(this.configuration).merge(owner, repository, mrSeq, mergeMergeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary merge a mergerequest
     * @param {string} owner 
     * @param {string} repository 
     * @param {string} mrSeq 
     * @param {MergeMergeRequest} [mergeMergeRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MergerequestApi
     */
    public merge_4(owner: string, repository: string, mrSeq: string, mergeMergeRequest?: MergeMergeRequest, options?: any) {
        return MergerequestApiFp(this.configuration).merge_4(owner, repository, mrSeq, mergeMergeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary update merge request
     * @param {string} owner 
     * @param {string} repository 
     * @param {string} mrSeq 
     * @param {UpdateMergeRequest} [updateMergeRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MergerequestApi
     */
    public updateMergeRequest(owner: string, repository: string, mrSeq: string, updateMergeRequest?: UpdateMergeRequest, options?: any) {
        return MergerequestApiFp(this.configuration).updateMergeRequest(owner, repository, mrSeq, updateMergeRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary update merge request
     * @param {string} owner 
     * @param {string} repository 
     * @param {string} mrSeq 
     * @param {UpdateMergeRequest} [updateMergeRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MergerequestApi
     */
    public updateMergeRequest_5(owner: string, repository: string, mrSeq: string, updateMergeRequest?: UpdateMergeRequest, options?: any) {
        return MergerequestApiFp(this.configuration).updateMergeRequest_5(owner, repository, mrSeq, updateMergeRequest, options).then((request) => request(this.axios, this.basePath));
    }

}
