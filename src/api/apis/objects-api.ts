// tslint:disable
/**
 * JZConsole
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


// @ts-ignore
import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ObjectStats } from '../models';
// @ts-ignore
import { RefType } from '../models';
/**
 * ObjectsApi - axios parameter creator
 * @export
 */
export const ObjectsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary delete object. Missing objects will not return a NotFound error.
         * @param {string} owner 
         * @param {string} repository 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteObject: async (owner: string, repository: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling deleteObject.');
            }
            // verify required parameter 'repository' is not null or undefined
            if (repository === null || repository === undefined) {
                throw new RequiredError('repository','Required parameter repository was null or undefined when calling deleteObject.');
            }
            const localVarPath = `/object/{owner}/{repository}`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"repository"}}`, encodeURIComponent(String(repository)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary delete object. Missing objects will not return a NotFound error.
         * @param {string} owner 
         * @param {string} repository 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteObject_1: async (owner: string, repository: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling deleteObject_1.');
            }
            // verify required parameter 'repository' is not null or undefined
            if (repository === null || repository === undefined) {
                throw new RequiredError('repository','Required parameter repository was null or undefined when calling deleteObject_1.');
            }
            const localVarPath = `/object/{owner}/{repository}`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"repository"}}`, encodeURIComponent(String(repository)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get files by pattern
         * @param {string} owner 
         * @param {string} repository 
         * @param {RefType} type files to retrieve from wip/branch/tag/commit, default branch
         * @param {string} [pattern] glob pattern for match file path
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFiles: async (owner: string, repository: string, type: RefType, pattern?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling getFiles.');
            }
            // verify required parameter 'repository' is not null or undefined
            if (repository === null || repository === undefined) {
                throw new RequiredError('repository','Required parameter repository was null or undefined when calling getFiles.');
            }
            // verify required parameter 'type' is not null or undefined
            if (type === null || type === undefined) {
                throw new RequiredError('type','Required parameter type was null or undefined when calling getFiles.');
            }
            const localVarPath = `/object/{owner}/{repository}/files`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"repository"}}`, encodeURIComponent(String(repository)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pattern !== undefined) {
                localVarQueryParameter['pattern'] = pattern;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get files by pattern
         * @param {string} owner 
         * @param {string} repository 
         * @param {RefType} type files to retrieve from wip/branch/tag/commit, default branch
         * @param {string} [pattern] glob pattern for match file path
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFiles_2: async (owner: string, repository: string, type: RefType, pattern?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling getFiles_2.');
            }
            // verify required parameter 'repository' is not null or undefined
            if (repository === null || repository === undefined) {
                throw new RequiredError('repository','Required parameter repository was null or undefined when calling getFiles_2.');
            }
            // verify required parameter 'type' is not null or undefined
            if (type === null || type === undefined) {
                throw new RequiredError('type','Required parameter type was null or undefined when calling getFiles_2.');
            }
            const localVarPath = `/object/{owner}/{repository}/files`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"repository"}}`, encodeURIComponent(String(repository)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (pattern !== undefined) {
                localVarQueryParameter['pattern'] = pattern;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get object content
         * @param {string} owner 
         * @param {string} repository 
         * @param {RefType} type type indicate to retrieve from wip/branch/tag, default branch
         * @param {string} [range] Byte range to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getObject: async (owner: string, repository: string, type: RefType, range?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling getObject.');
            }
            // verify required parameter 'repository' is not null or undefined
            if (repository === null || repository === undefined) {
                throw new RequiredError('repository','Required parameter repository was null or undefined when calling getObject.');
            }
            // verify required parameter 'type' is not null or undefined
            if (type === null || type === undefined) {
                throw new RequiredError('type','Required parameter type was null or undefined when calling getObject.');
            }
            const localVarPath = `/object/{owner}/{repository}`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"repository"}}`, encodeURIComponent(String(repository)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (range !== undefined && range !== null) {
                localVarHeaderParameter['Range'] = String(range);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get object content
         * @param {string} owner 
         * @param {string} repository 
         * @param {RefType} type type indicate to retrieve from wip/branch/tag, default branch
         * @param {string} [range] Byte range to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getObject_3: async (owner: string, repository: string, type: RefType, range?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling getObject_3.');
            }
            // verify required parameter 'repository' is not null or undefined
            if (repository === null || repository === undefined) {
                throw new RequiredError('repository','Required parameter repository was null or undefined when calling getObject_3.');
            }
            // verify required parameter 'type' is not null or undefined
            if (type === null || type === undefined) {
                throw new RequiredError('type','Required parameter type was null or undefined when calling getObject_3.');
            }
            const localVarPath = `/object/{owner}/{repository}`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"repository"}}`, encodeURIComponent(String(repository)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (range !== undefined && range !== null) {
                localVarHeaderParameter['Range'] = String(range);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary check if object exists
         * @param {string} owner 
         * @param {string} repository 
         * @param {RefType} type type indicate to retrieve from wip/branch/tag, default branch
         * @param {string} [range] Byte range to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headObject: async (owner: string, repository: string, type: RefType, range?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling headObject.');
            }
            // verify required parameter 'repository' is not null or undefined
            if (repository === null || repository === undefined) {
                throw new RequiredError('repository','Required parameter repository was null or undefined when calling headObject.');
            }
            // verify required parameter 'type' is not null or undefined
            if (type === null || type === undefined) {
                throw new RequiredError('type','Required parameter type was null or undefined when calling headObject.');
            }
            const localVarPath = `/object/{owner}/{repository}`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"repository"}}`, encodeURIComponent(String(repository)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'HEAD', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (range !== undefined && range !== null) {
                localVarHeaderParameter['Range'] = String(range);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary check if object exists
         * @param {string} owner 
         * @param {string} repository 
         * @param {RefType} type type indicate to retrieve from wip/branch/tag, default branch
         * @param {string} [range] Byte range to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headObject_4: async (owner: string, repository: string, type: RefType, range?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling headObject_4.');
            }
            // verify required parameter 'repository' is not null or undefined
            if (repository === null || repository === undefined) {
                throw new RequiredError('repository','Required parameter repository was null or undefined when calling headObject_4.');
            }
            // verify required parameter 'type' is not null or undefined
            if (type === null || type === undefined) {
                throw new RequiredError('type','Required parameter type was null or undefined when calling headObject_4.');
            }
            const localVarPath = `/object/{owner}/{repository}`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"repository"}}`, encodeURIComponent(String(repository)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'HEAD', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (range !== undefined && range !== null) {
                localVarHeaderParameter['Range'] = String(range);
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary uploadObject
         * @param {string} owner 
         * @param {string} repository 
         * @param {boolean} [isReplace] indicate to replace existing object or not
         * @param {any} [content] Only a single file per upload which must be named \\\&quot;content\\\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadObject: async (owner: string, repository: string, isReplace?: boolean, content?: any, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling uploadObject.');
            }
            // verify required parameter 'repository' is not null or undefined
            if (repository === null || repository === undefined) {
                throw new RequiredError('repository','Required parameter repository was null or undefined when calling uploadObject.');
            }
            const localVarPath = `/object/{owner}/{repository}`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"repository"}}`, encodeURIComponent(String(repository)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            if (isReplace !== undefined) {
                localVarQueryParameter['isReplace'] = isReplace;
            }


            if (content !== undefined) { 
                localVarFormParams.append('content', content as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary uploadObject
         * @param {string} owner 
         * @param {string} repository 
         * @param {boolean} [isReplace] indicate to replace existing object or not
         * @param {any} [content] Only a single file per upload which must be named \\\&quot;content\\\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadObject_5: async (owner: string, repository: string, isReplace?: boolean, content?: any, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling uploadObject_5.');
            }
            // verify required parameter 'repository' is not null or undefined
            if (repository === null || repository === undefined) {
                throw new RequiredError('repository','Required parameter repository was null or undefined when calling uploadObject_5.');
            }
            const localVarPath = `/object/{owner}/{repository}`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"repository"}}`, encodeURIComponent(String(repository)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new FormData();

            if (isReplace !== undefined) {
                localVarQueryParameter['isReplace'] = isReplace;
            }


            if (content !== undefined) { 
                localVarFormParams.append('content', content as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ObjectsApi - functional programming interface
 * @export
 */
export const ObjectsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary delete object. Missing objects will not return a NotFound error.
         * @param {string} owner 
         * @param {string} repository 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteObject(owner: string, repository: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await ObjectsApiAxiosParamCreator(configuration).deleteObject(owner, repository, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary delete object. Missing objects will not return a NotFound error.
         * @param {string} owner 
         * @param {string} repository 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteObject_1(owner: string, repository: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await ObjectsApiAxiosParamCreator(configuration).deleteObject_1(owner, repository, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary get files by pattern
         * @param {string} owner 
         * @param {string} repository 
         * @param {RefType} type files to retrieve from wip/branch/tag/commit, default branch
         * @param {string} [pattern] glob pattern for match file path
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFiles(owner: string, repository: string, type: RefType, pattern?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await ObjectsApiAxiosParamCreator(configuration).getFiles(owner, repository, type, pattern, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary get files by pattern
         * @param {string} owner 
         * @param {string} repository 
         * @param {RefType} type files to retrieve from wip/branch/tag/commit, default branch
         * @param {string} [pattern] glob pattern for match file path
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getFiles_2(owner: string, repository: string, type: RefType, pattern?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await ObjectsApiAxiosParamCreator(configuration).getFiles_2(owner, repository, type, pattern, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary get object content
         * @param {string} owner 
         * @param {string} repository 
         * @param {RefType} type type indicate to retrieve from wip/branch/tag, default branch
         * @param {string} [range] Byte range to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getObject(owner: string, repository: string, type: RefType, range?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await ObjectsApiAxiosParamCreator(configuration).getObject(owner, repository, type, range, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary get object content
         * @param {string} owner 
         * @param {string} repository 
         * @param {RefType} type type indicate to retrieve from wip/branch/tag, default branch
         * @param {string} [range] Byte range to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getObject_3(owner: string, repository: string, type: RefType, range?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await ObjectsApiAxiosParamCreator(configuration).getObject_3(owner, repository, type, range, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary check if object exists
         * @param {string} owner 
         * @param {string} repository 
         * @param {RefType} type type indicate to retrieve from wip/branch/tag, default branch
         * @param {string} [range] Byte range to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async headObject(owner: string, repository: string, type: RefType, range?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await ObjectsApiAxiosParamCreator(configuration).headObject(owner, repository, type, range, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary check if object exists
         * @param {string} owner 
         * @param {string} repository 
         * @param {RefType} type type indicate to retrieve from wip/branch/tag, default branch
         * @param {string} [range] Byte range to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async headObject_4(owner: string, repository: string, type: RefType, range?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await ObjectsApiAxiosParamCreator(configuration).headObject_4(owner, repository, type, range, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary uploadObject
         * @param {string} owner 
         * @param {string} repository 
         * @param {boolean} [isReplace] indicate to replace existing object or not
         * @param {any} [content] Only a single file per upload which must be named \\\&quot;content\\\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadObject(owner: string, repository: string, isReplace?: boolean, content?: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObjectStats>> {
            const localVarAxiosArgs = await ObjectsApiAxiosParamCreator(configuration).uploadObject(owner, repository, isReplace, content, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary uploadObject
         * @param {string} owner 
         * @param {string} repository 
         * @param {boolean} [isReplace] indicate to replace existing object or not
         * @param {any} [content] Only a single file per upload which must be named \\\&quot;content\\\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async uploadObject_5(owner: string, repository: string, isReplace?: boolean, content?: any, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ObjectStats>> {
            const localVarAxiosArgs = await ObjectsApiAxiosParamCreator(configuration).uploadObject_5(owner, repository, isReplace, content, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ObjectsApi - factory interface
 * @export
 */
export const ObjectsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary delete object. Missing objects will not return a NotFound error.
         * @param {string} owner 
         * @param {string} repository 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteObject(owner: string, repository: string, options?: any): AxiosPromise<object> {
            return ObjectsApiFp(configuration).deleteObject(owner, repository, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary delete object. Missing objects will not return a NotFound error.
         * @param {string} owner 
         * @param {string} repository 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteObject_1(owner: string, repository: string, options?: any): AxiosPromise<object> {
            return ObjectsApiFp(configuration).deleteObject_1(owner, repository, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get files by pattern
         * @param {string} owner 
         * @param {string} repository 
         * @param {RefType} type files to retrieve from wip/branch/tag/commit, default branch
         * @param {string} [pattern] glob pattern for match file path
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFiles(owner: string, repository: string, type: RefType, pattern?: string, options?: any): AxiosPromise<Array<string>> {
            return ObjectsApiFp(configuration).getFiles(owner, repository, type, pattern, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get files by pattern
         * @param {string} owner 
         * @param {string} repository 
         * @param {RefType} type files to retrieve from wip/branch/tag/commit, default branch
         * @param {string} [pattern] glob pattern for match file path
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getFiles_2(owner: string, repository: string, type: RefType, pattern?: string, options?: any): AxiosPromise<Array<string>> {
            return ObjectsApiFp(configuration).getFiles_2(owner, repository, type, pattern, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get object content
         * @param {string} owner 
         * @param {string} repository 
         * @param {RefType} type type indicate to retrieve from wip/branch/tag, default branch
         * @param {string} [range] Byte range to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getObject(owner: string, repository: string, type: RefType, range?: string, options?: any): AxiosPromise<object> {
            return ObjectsApiFp(configuration).getObject(owner, repository, type, range, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get object content
         * @param {string} owner 
         * @param {string} repository 
         * @param {RefType} type type indicate to retrieve from wip/branch/tag, default branch
         * @param {string} [range] Byte range to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getObject_3(owner: string, repository: string, type: RefType, range?: string, options?: any): AxiosPromise<object> {
            return ObjectsApiFp(configuration).getObject_3(owner, repository, type, range, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary check if object exists
         * @param {string} owner 
         * @param {string} repository 
         * @param {RefType} type type indicate to retrieve from wip/branch/tag, default branch
         * @param {string} [range] Byte range to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headObject(owner: string, repository: string, type: RefType, range?: string, options?: any): AxiosPromise<object> {
            return ObjectsApiFp(configuration).headObject(owner, repository, type, range, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary check if object exists
         * @param {string} owner 
         * @param {string} repository 
         * @param {RefType} type type indicate to retrieve from wip/branch/tag, default branch
         * @param {string} [range] Byte range to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        headObject_4(owner: string, repository: string, type: RefType, range?: string, options?: any): AxiosPromise<object> {
            return ObjectsApiFp(configuration).headObject_4(owner, repository, type, range, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary uploadObject
         * @param {string} owner 
         * @param {string} repository 
         * @param {boolean} [isReplace] indicate to replace existing object or not
         * @param {any} [content] Only a single file per upload which must be named \\\&quot;content\\\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadObject(owner: string, repository: string, isReplace?: boolean, content?: any, options?: any): AxiosPromise<ObjectStats> {
            return ObjectsApiFp(configuration).uploadObject(owner, repository, isReplace, content, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary uploadObject
         * @param {string} owner 
         * @param {string} repository 
         * @param {boolean} [isReplace] indicate to replace existing object or not
         * @param {any} [content] Only a single file per upload which must be named \\\&quot;content\\\&quot;.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        uploadObject_5(owner: string, repository: string, isReplace?: boolean, content?: any, options?: any): AxiosPromise<ObjectStats> {
            return ObjectsApiFp(configuration).uploadObject_5(owner, repository, isReplace, content, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ObjectsApi - object-oriented interface
 * @export
 * @class ObjectsApi
 * @extends {BaseAPI}
 */
export class ObjectsApi extends BaseAPI {
    /**
     * 
     * @summary delete object. Missing objects will not return a NotFound error.
     * @param {string} owner 
     * @param {string} repository 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectsApi
     */
    public deleteObject(owner: string, repository: string, options?: any) {
        return ObjectsApiFp(this.configuration).deleteObject(owner, repository, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary delete object. Missing objects will not return a NotFound error.
     * @param {string} owner 
     * @param {string} repository 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectsApi
     */
    public deleteObject_1(owner: string, repository: string, options?: any) {
        return ObjectsApiFp(this.configuration).deleteObject_1(owner, repository, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get files by pattern
     * @param {string} owner 
     * @param {string} repository 
     * @param {RefType} type files to retrieve from wip/branch/tag/commit, default branch
     * @param {string} [pattern] glob pattern for match file path
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectsApi
     */
    public getFiles(owner: string, repository: string, type: RefType, pattern?: string, options?: any) {
        return ObjectsApiFp(this.configuration).getFiles(owner, repository, type, pattern, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get files by pattern
     * @param {string} owner 
     * @param {string} repository 
     * @param {RefType} type files to retrieve from wip/branch/tag/commit, default branch
     * @param {string} [pattern] glob pattern for match file path
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectsApi
     */
    public getFiles_2(owner: string, repository: string, type: RefType, pattern?: string, options?: any) {
        return ObjectsApiFp(this.configuration).getFiles_2(owner, repository, type, pattern, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get object content
     * @param {string} owner 
     * @param {string} repository 
     * @param {RefType} type type indicate to retrieve from wip/branch/tag, default branch
     * @param {string} [range] Byte range to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectsApi
     */
    public getObject(owner: string, repository: string, type: RefType, range?: string, options?: any) {
        return ObjectsApiFp(this.configuration).getObject(owner, repository, type, range, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get object content
     * @param {string} owner 
     * @param {string} repository 
     * @param {RefType} type type indicate to retrieve from wip/branch/tag, default branch
     * @param {string} [range] Byte range to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectsApi
     */
    public getObject_3(owner: string, repository: string, type: RefType, range?: string, options?: any) {
        return ObjectsApiFp(this.configuration).getObject_3(owner, repository, type, range, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary check if object exists
     * @param {string} owner 
     * @param {string} repository 
     * @param {RefType} type type indicate to retrieve from wip/branch/tag, default branch
     * @param {string} [range] Byte range to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectsApi
     */
    public headObject(owner: string, repository: string, type: RefType, range?: string, options?: any) {
        return ObjectsApiFp(this.configuration).headObject(owner, repository, type, range, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary check if object exists
     * @param {string} owner 
     * @param {string} repository 
     * @param {RefType} type type indicate to retrieve from wip/branch/tag, default branch
     * @param {string} [range] Byte range to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectsApi
     */
    public headObject_4(owner: string, repository: string, type: RefType, range?: string, options?: any) {
        return ObjectsApiFp(this.configuration).headObject_4(owner, repository, type, range, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary uploadObject
     * @param {string} owner 
     * @param {string} repository 
     * @param {boolean} [isReplace] indicate to replace existing object or not
     * @param {any} [content] Only a single file per upload which must be named \\\&quot;content\\\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectsApi
     */
    public uploadObject(owner: string, repository: string, isReplace?: boolean, content?: any, options?: any) {
        return ObjectsApiFp(this.configuration).uploadObject(owner, repository, isReplace, content, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary uploadObject
     * @param {string} owner 
     * @param {string} repository 
     * @param {boolean} [isReplace] indicate to replace existing object or not
     * @param {any} [content] Only a single file per upload which must be named \\\&quot;content\\\&quot;.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ObjectsApi
     */
    public uploadObject_5(owner: string, repository: string, isReplace?: boolean, content?: any, options?: any) {
        return ObjectsApiFp(this.configuration).uploadObject_5(owner, repository, isReplace, content, options).then((request) => request(this.axios, this.basePath));
    }

}
