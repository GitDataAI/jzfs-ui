// tslint:disable
/**
 * JZConsole
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


// @ts-ignore
import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { ArchiveType } from '../models';
// @ts-ignore
import { RefType } from '../models';
/**
 * ReposApi - axios parameter creator
 * @export
 */
export const ReposApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary get repo files archive
         * @param {string} owner 
         * @param {string} repository 
         * @param {ArchiveType} archiveType download zip or car files
         * @param {RefType} refType ref type only allow branch or tag
         * @param {string} refName ref(branch/tag) name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArchive: async (owner: string, repository: string, archiveType: ArchiveType, refType: RefType, refName: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling getArchive.');
            }
            // verify required parameter 'repository' is not null or undefined
            if (repository === null || repository === undefined) {
                throw new RequiredError('repository','Required parameter repository was null or undefined when calling getArchive.');
            }
            // verify required parameter 'archiveType' is not null or undefined
            if (archiveType === null || archiveType === undefined) {
                throw new RequiredError('archiveType','Required parameter archiveType was null or undefined when calling getArchive.');
            }
            // verify required parameter 'refType' is not null or undefined
            if (refType === null || refType === undefined) {
                throw new RequiredError('refType','Required parameter refType was null or undefined when calling getArchive.');
            }
            // verify required parameter 'refName' is not null or undefined
            if (refName === null || refName === undefined) {
                throw new RequiredError('refName','Required parameter refName was null or undefined when calling getArchive.');
            }
            const localVarPath = `/repos/{owner}/{repository}/archive`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"repository"}}`, encodeURIComponent(String(repository)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (archiveType !== undefined) {
                localVarQueryParameter['archive_type'] = archiveType;
            }

            if (refType !== undefined) {
                localVarQueryParameter['refType'] = refType;
            }

            if (refName !== undefined) {
                localVarQueryParameter['refName'] = refName;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get repo files archive
         * @param {string} owner 
         * @param {string} repository 
         * @param {ArchiveType} archiveType download zip or car files
         * @param {RefType} refType ref type only allow branch or tag
         * @param {string} refName ref(branch/tag) name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArchive_1: async (owner: string, repository: string, archiveType: ArchiveType, refType: RefType, refName: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling getArchive_1.');
            }
            // verify required parameter 'repository' is not null or undefined
            if (repository === null || repository === undefined) {
                throw new RequiredError('repository','Required parameter repository was null or undefined when calling getArchive_1.');
            }
            // verify required parameter 'archiveType' is not null or undefined
            if (archiveType === null || archiveType === undefined) {
                throw new RequiredError('archiveType','Required parameter archiveType was null or undefined when calling getArchive_1.');
            }
            // verify required parameter 'refType' is not null or undefined
            if (refType === null || refType === undefined) {
                throw new RequiredError('refType','Required parameter refType was null or undefined when calling getArchive_1.');
            }
            // verify required parameter 'refName' is not null or undefined
            if (refName === null || refName === undefined) {
                throw new RequiredError('refName','Required parameter refName was null or undefined when calling getArchive_1.');
            }
            const localVarPath = `/repos/{owner}/{repository}/archive`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"repository"}}`, encodeURIComponent(String(repository)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (archiveType !== undefined) {
                localVarQueryParameter['archive_type'] = archiveType;
            }

            if (refType !== undefined) {
                localVarQueryParameter['refType'] = refType;
            }

            if (refName !== undefined) {
                localVarQueryParameter['refName'] = refName;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReposApi - functional programming interface
 * @export
 */
export const ReposApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary get repo files archive
         * @param {string} owner 
         * @param {string} repository 
         * @param {ArchiveType} archiveType download zip or car files
         * @param {RefType} refType ref type only allow branch or tag
         * @param {string} refName ref(branch/tag) name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getArchive(owner: string, repository: string, archiveType: ArchiveType, refType: RefType, refName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await ReposApiAxiosParamCreator(configuration).getArchive(owner, repository, archiveType, refType, refName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary get repo files archive
         * @param {string} owner 
         * @param {string} repository 
         * @param {ArchiveType} archiveType download zip or car files
         * @param {RefType} refType ref type only allow branch or tag
         * @param {string} refName ref(branch/tag) name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getArchive_1(owner: string, repository: string, archiveType: ArchiveType, refType: RefType, refName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await ReposApiAxiosParamCreator(configuration).getArchive_1(owner, repository, archiveType, refType, refName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ReposApi - factory interface
 * @export
 */
export const ReposApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary get repo files archive
         * @param {string} owner 
         * @param {string} repository 
         * @param {ArchiveType} archiveType download zip or car files
         * @param {RefType} refType ref type only allow branch or tag
         * @param {string} refName ref(branch/tag) name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArchive(owner: string, repository: string, archiveType: ArchiveType, refType: RefType, refName: string, options?: any): AxiosPromise<object> {
            return ReposApiFp(configuration).getArchive(owner, repository, archiveType, refType, refName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get repo files archive
         * @param {string} owner 
         * @param {string} repository 
         * @param {ArchiveType} archiveType download zip or car files
         * @param {RefType} refType ref type only allow branch or tag
         * @param {string} refName ref(branch/tag) name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getArchive_1(owner: string, repository: string, archiveType: ArchiveType, refType: RefType, refName: string, options?: any): AxiosPromise<object> {
            return ReposApiFp(configuration).getArchive_1(owner, repository, archiveType, refType, refName, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReposApi - object-oriented interface
 * @export
 * @class ReposApi
 * @extends {BaseAPI}
 */
export class ReposApi extends BaseAPI {
    /**
     * 
     * @summary get repo files archive
     * @param {string} owner 
     * @param {string} repository 
     * @param {ArchiveType} archiveType download zip or car files
     * @param {RefType} refType ref type only allow branch or tag
     * @param {string} refName ref(branch/tag) name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReposApi
     */
    public getArchive(owner: string, repository: string, archiveType: ArchiveType, refType: RefType, refName: string, options?: any) {
        return ReposApiFp(this.configuration).getArchive(owner, repository, archiveType, refType, refName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get repo files archive
     * @param {string} owner 
     * @param {string} repository 
     * @param {ArchiveType} archiveType download zip or car files
     * @param {RefType} refType ref type only allow branch or tag
     * @param {string} refName ref(branch/tag) name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReposApi
     */
    public getArchive_1(owner: string, repository: string, archiveType: ArchiveType, refType: RefType, refName: string, options?: any) {
        return ReposApiFp(this.configuration).getArchive_1(owner, repository, archiveType, refType, refName, options).then((request) => request(this.axios, this.basePath));
    }

}
