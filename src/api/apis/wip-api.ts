// tslint:disable
/**
 * JZConsole
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


// @ts-ignore
import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Change } from '../models';
// @ts-ignore
import { UpdateWip } from '../models';
// @ts-ignore
import { Wip } from '../models';
/**
 * WipApi - axios parameter creator
 * @export
 */
export const WipApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary commit working in process to branch
         * @param {string} owner 
         * @param {string} repository 
         * @param {string} msg commit message
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commitWip: async (owner: string, repository: string, msg: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling commitWip.');
            }
            // verify required parameter 'repository' is not null or undefined
            if (repository === null || repository === undefined) {
                throw new RequiredError('repository','Required parameter repository was null or undefined when calling commitWip.');
            }
            // verify required parameter 'msg' is not null or undefined
            if (msg === null || msg === undefined) {
                throw new RequiredError('msg','Required parameter msg was null or undefined when calling commitWip.');
            }
            const localVarPath = `/wip/{owner}/{repository}/commit`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"repository"}}`, encodeURIComponent(String(repository)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (msg !== undefined) {
                localVarQueryParameter['msg'] = msg;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary commit working in process to branch
         * @param {string} owner 
         * @param {string} repository 
         * @param {string} msg commit message
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commitWip_1: async (owner: string, repository: string, msg: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling commitWip_1.');
            }
            // verify required parameter 'repository' is not null or undefined
            if (repository === null || repository === undefined) {
                throw new RequiredError('repository','Required parameter repository was null or undefined when calling commitWip_1.');
            }
            // verify required parameter 'msg' is not null or undefined
            if (msg === null || msg === undefined) {
                throw new RequiredError('msg','Required parameter msg was null or undefined when calling commitWip_1.');
            }
            const localVarPath = `/wip/{owner}/{repository}/commit`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"repository"}}`, encodeURIComponent(String(repository)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (msg !== undefined) {
                localVarQueryParameter['msg'] = msg;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary remove working in process
         * @param {string} owner 
         * @param {string} repository 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWip: async (owner: string, repository: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling deleteWip.');
            }
            // verify required parameter 'repository' is not null or undefined
            if (repository === null || repository === undefined) {
                throw new RequiredError('repository','Required parameter repository was null or undefined when calling deleteWip.');
            }
            const localVarPath = `/wip/{owner}/{repository}`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"repository"}}`, encodeURIComponent(String(repository)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary remove working in process
         * @param {string} owner 
         * @param {string} repository 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWip_2: async (owner: string, repository: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling deleteWip_2.');
            }
            // verify required parameter 'repository' is not null or undefined
            if (repository === null || repository === undefined) {
                throw new RequiredError('repository','Required parameter repository was null or undefined when calling deleteWip_2.');
            }
            const localVarPath = `/wip/{owner}/{repository}`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"repository"}}`, encodeURIComponent(String(repository)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get working in process
         * @param {string} owner 
         * @param {string} repository 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWip: async (owner: string, repository: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling getWip.');
            }
            // verify required parameter 'repository' is not null or undefined
            if (repository === null || repository === undefined) {
                throw new RequiredError('repository','Required parameter repository was null or undefined when calling getWip.');
            }
            const localVarPath = `/wip/{owner}/{repository}`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"repository"}}`, encodeURIComponent(String(repository)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get working in process changes
         * @param {string} owner 
         * @param {string} repository 
         * @param {string} refName ref name
         * @param {string} [path] path
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWipChanges: async (owner: string, repository: string, refName: string, path?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling getWipChanges.');
            }
            // verify required parameter 'repository' is not null or undefined
            if (repository === null || repository === undefined) {
                throw new RequiredError('repository','Required parameter repository was null or undefined when calling getWipChanges.');
            }
            // verify required parameter 'refName' is not null or undefined
            if (refName === null || refName === undefined) {
                throw new RequiredError('refName','Required parameter refName was null or undefined when calling getWipChanges.');
            }
            const localVarPath = `/wip/{owner}/{repository}/changes`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"repository"}}`, encodeURIComponent(String(repository)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (refName !== undefined) {
                localVarQueryParameter['refName'] = refName;
            }

            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get working in process changes
         * @param {string} owner 
         * @param {string} repository 
         * @param {string} refName ref name
         * @param {string} [path] path
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWipChanges_3: async (owner: string, repository: string, refName: string, path?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling getWipChanges_3.');
            }
            // verify required parameter 'repository' is not null or undefined
            if (repository === null || repository === undefined) {
                throw new RequiredError('repository','Required parameter repository was null or undefined when calling getWipChanges_3.');
            }
            // verify required parameter 'refName' is not null or undefined
            if (refName === null || refName === undefined) {
                throw new RequiredError('refName','Required parameter refName was null or undefined when calling getWipChanges_3.');
            }
            const localVarPath = `/wip/{owner}/{repository}/changes`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"repository"}}`, encodeURIComponent(String(repository)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (refName !== undefined) {
                localVarQueryParameter['refName'] = refName;
            }

            if (path !== undefined) {
                localVarQueryParameter['path'] = path;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get working in process
         * @param {string} owner 
         * @param {string} repository 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWip_4: async (owner: string, repository: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling getWip_4.');
            }
            // verify required parameter 'repository' is not null or undefined
            if (repository === null || repository === undefined) {
                throw new RequiredError('repository','Required parameter repository was null or undefined when calling getWip_4.');
            }
            const localVarPath = `/wip/{owner}/{repository}`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"repository"}}`, encodeURIComponent(String(repository)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary list wip in specific project and user
         * @param {string} owner 
         * @param {string} repository 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listWip: async (owner: string, repository: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling listWip.');
            }
            // verify required parameter 'repository' is not null or undefined
            if (repository === null || repository === undefined) {
                throw new RequiredError('repository','Required parameter repository was null or undefined when calling listWip.');
            }
            const localVarPath = `/wip/{owner}/{repository}/list`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"repository"}}`, encodeURIComponent(String(repository)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary list wip in specific project and user
         * @param {string} owner 
         * @param {string} repository 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listWip_5: async (owner: string, repository: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling listWip_5.');
            }
            // verify required parameter 'repository' is not null or undefined
            if (repository === null || repository === undefined) {
                throw new RequiredError('repository','Required parameter repository was null or undefined when calling listWip_5.');
            }
            const localVarPath = `/wip/{owner}/{repository}/list`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"repository"}}`, encodeURIComponent(String(repository)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary revert changes in working in process, empty path will revert all
         * @param {string} owner 
         * @param {string} repository 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revertWipChanges: async (owner: string, repository: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling revertWipChanges.');
            }
            // verify required parameter 'repository' is not null or undefined
            if (repository === null || repository === undefined) {
                throw new RequiredError('repository','Required parameter repository was null or undefined when calling revertWipChanges.');
            }
            const localVarPath = `/wip/{owner}/{repository}/revert`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"repository"}}`, encodeURIComponent(String(repository)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary revert changes in working in process, empty path will revert all
         * @param {string} owner 
         * @param {string} repository 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revertWipChanges_6: async (owner: string, repository: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling revertWipChanges_6.');
            }
            // verify required parameter 'repository' is not null or undefined
            if (repository === null || repository === undefined) {
                throw new RequiredError('repository','Required parameter repository was null or undefined when calling revertWipChanges_6.');
            }
            const localVarPath = `/wip/{owner}/{repository}/revert`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"repository"}}`, encodeURIComponent(String(repository)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary update wip
         * @param {string} owner 
         * @param {string} repository 
         * @param {UpdateWip} [updateWip] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWip: async (owner: string, repository: string, updateWip?: UpdateWip, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling updateWip.');
            }
            // verify required parameter 'repository' is not null or undefined
            if (repository === null || repository === undefined) {
                throw new RequiredError('repository','Required parameter repository was null or undefined when calling updateWip.');
            }
            const localVarPath = `/wip/{owner}/{repository}`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"repository"}}`, encodeURIComponent(String(repository)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof updateWip !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(updateWip !== undefined ? updateWip : {}) : (updateWip || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary update wip
         * @param {string} owner 
         * @param {string} repository 
         * @param {UpdateWip} [updateWip] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWip_7: async (owner: string, repository: string, updateWip?: UpdateWip, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling updateWip_7.');
            }
            // verify required parameter 'repository' is not null or undefined
            if (repository === null || repository === undefined) {
                throw new RequiredError('repository','Required parameter repository was null or undefined when calling updateWip_7.');
            }
            const localVarPath = `/wip/{owner}/{repository}`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"repository"}}`, encodeURIComponent(String(repository)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof updateWip !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(updateWip !== undefined ? updateWip : {}) : (updateWip || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * WipApi - functional programming interface
 * @export
 */
export const WipApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary commit working in process to branch
         * @param {string} owner 
         * @param {string} repository 
         * @param {string} msg commit message
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commitWip(owner: string, repository: string, msg: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Wip>> {
            const localVarAxiosArgs = await WipApiAxiosParamCreator(configuration).commitWip(owner, repository, msg, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary commit working in process to branch
         * @param {string} owner 
         * @param {string} repository 
         * @param {string} msg commit message
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async commitWip_1(owner: string, repository: string, msg: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Wip>> {
            const localVarAxiosArgs = await WipApiAxiosParamCreator(configuration).commitWip_1(owner, repository, msg, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary remove working in process
         * @param {string} owner 
         * @param {string} repository 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteWip(owner: string, repository: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await WipApiAxiosParamCreator(configuration).deleteWip(owner, repository, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary remove working in process
         * @param {string} owner 
         * @param {string} repository 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteWip_2(owner: string, repository: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await WipApiAxiosParamCreator(configuration).deleteWip_2(owner, repository, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary get working in process
         * @param {string} owner 
         * @param {string} repository 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWip(owner: string, repository: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Wip>> {
            const localVarAxiosArgs = await WipApiAxiosParamCreator(configuration).getWip(owner, repository, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary get working in process changes
         * @param {string} owner 
         * @param {string} repository 
         * @param {string} refName ref name
         * @param {string} [path] path
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWipChanges(owner: string, repository: string, refName: string, path?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Change>>> {
            const localVarAxiosArgs = await WipApiAxiosParamCreator(configuration).getWipChanges(owner, repository, refName, path, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary get working in process changes
         * @param {string} owner 
         * @param {string} repository 
         * @param {string} refName ref name
         * @param {string} [path] path
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWipChanges_3(owner: string, repository: string, refName: string, path?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Change>>> {
            const localVarAxiosArgs = await WipApiAxiosParamCreator(configuration).getWipChanges_3(owner, repository, refName, path, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary get working in process
         * @param {string} owner 
         * @param {string} repository 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getWip_4(owner: string, repository: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Wip>> {
            const localVarAxiosArgs = await WipApiAxiosParamCreator(configuration).getWip_4(owner, repository, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary list wip in specific project and user
         * @param {string} owner 
         * @param {string} repository 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listWip(owner: string, repository: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Wip>>> {
            const localVarAxiosArgs = await WipApiAxiosParamCreator(configuration).listWip(owner, repository, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary list wip in specific project and user
         * @param {string} owner 
         * @param {string} repository 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listWip_5(owner: string, repository: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Wip>>> {
            const localVarAxiosArgs = await WipApiAxiosParamCreator(configuration).listWip_5(owner, repository, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary revert changes in working in process, empty path will revert all
         * @param {string} owner 
         * @param {string} repository 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async revertWipChanges(owner: string, repository: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await WipApiAxiosParamCreator(configuration).revertWipChanges(owner, repository, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary revert changes in working in process, empty path will revert all
         * @param {string} owner 
         * @param {string} repository 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async revertWipChanges_6(owner: string, repository: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await WipApiAxiosParamCreator(configuration).revertWipChanges_6(owner, repository, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary update wip
         * @param {string} owner 
         * @param {string} repository 
         * @param {UpdateWip} [updateWip] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateWip(owner: string, repository: string, updateWip?: UpdateWip, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await WipApiAxiosParamCreator(configuration).updateWip(owner, repository, updateWip, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary update wip
         * @param {string} owner 
         * @param {string} repository 
         * @param {UpdateWip} [updateWip] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateWip_7(owner: string, repository: string, updateWip?: UpdateWip, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await WipApiAxiosParamCreator(configuration).updateWip_7(owner, repository, updateWip, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * WipApi - factory interface
 * @export
 */
export const WipApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary commit working in process to branch
         * @param {string} owner 
         * @param {string} repository 
         * @param {string} msg commit message
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commitWip(owner: string, repository: string, msg: string, options?: any): AxiosPromise<Wip> {
            return WipApiFp(configuration).commitWip(owner, repository, msg, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary commit working in process to branch
         * @param {string} owner 
         * @param {string} repository 
         * @param {string} msg commit message
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        commitWip_1(owner: string, repository: string, msg: string, options?: any): AxiosPromise<Wip> {
            return WipApiFp(configuration).commitWip_1(owner, repository, msg, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary remove working in process
         * @param {string} owner 
         * @param {string} repository 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWip(owner: string, repository: string, options?: any): AxiosPromise<object> {
            return WipApiFp(configuration).deleteWip(owner, repository, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary remove working in process
         * @param {string} owner 
         * @param {string} repository 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteWip_2(owner: string, repository: string, options?: any): AxiosPromise<object> {
            return WipApiFp(configuration).deleteWip_2(owner, repository, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get working in process
         * @param {string} owner 
         * @param {string} repository 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWip(owner: string, repository: string, options?: any): AxiosPromise<Wip> {
            return WipApiFp(configuration).getWip(owner, repository, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get working in process changes
         * @param {string} owner 
         * @param {string} repository 
         * @param {string} refName ref name
         * @param {string} [path] path
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWipChanges(owner: string, repository: string, refName: string, path?: string, options?: any): AxiosPromise<Array<Change>> {
            return WipApiFp(configuration).getWipChanges(owner, repository, refName, path, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get working in process changes
         * @param {string} owner 
         * @param {string} repository 
         * @param {string} refName ref name
         * @param {string} [path] path
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWipChanges_3(owner: string, repository: string, refName: string, path?: string, options?: any): AxiosPromise<Array<Change>> {
            return WipApiFp(configuration).getWipChanges_3(owner, repository, refName, path, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get working in process
         * @param {string} owner 
         * @param {string} repository 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getWip_4(owner: string, repository: string, options?: any): AxiosPromise<Wip> {
            return WipApiFp(configuration).getWip_4(owner, repository, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary list wip in specific project and user
         * @param {string} owner 
         * @param {string} repository 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listWip(owner: string, repository: string, options?: any): AxiosPromise<Array<Wip>> {
            return WipApiFp(configuration).listWip(owner, repository, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary list wip in specific project and user
         * @param {string} owner 
         * @param {string} repository 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listWip_5(owner: string, repository: string, options?: any): AxiosPromise<Array<Wip>> {
            return WipApiFp(configuration).listWip_5(owner, repository, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary revert changes in working in process, empty path will revert all
         * @param {string} owner 
         * @param {string} repository 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revertWipChanges(owner: string, repository: string, options?: any): AxiosPromise<object> {
            return WipApiFp(configuration).revertWipChanges(owner, repository, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary revert changes in working in process, empty path will revert all
         * @param {string} owner 
         * @param {string} repository 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        revertWipChanges_6(owner: string, repository: string, options?: any): AxiosPromise<object> {
            return WipApiFp(configuration).revertWipChanges_6(owner, repository, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary update wip
         * @param {string} owner 
         * @param {string} repository 
         * @param {UpdateWip} [updateWip] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWip(owner: string, repository: string, updateWip?: UpdateWip, options?: any): AxiosPromise<object> {
            return WipApiFp(configuration).updateWip(owner, repository, updateWip, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary update wip
         * @param {string} owner 
         * @param {string} repository 
         * @param {UpdateWip} [updateWip] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateWip_7(owner: string, repository: string, updateWip?: UpdateWip, options?: any): AxiosPromise<object> {
            return WipApiFp(configuration).updateWip_7(owner, repository, updateWip, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * WipApi - object-oriented interface
 * @export
 * @class WipApi
 * @extends {BaseAPI}
 */
export class WipApi extends BaseAPI {
    /**
     * 
     * @summary commit working in process to branch
     * @param {string} owner 
     * @param {string} repository 
     * @param {string} msg commit message
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WipApi
     */
    public commitWip(owner: string, repository: string, msg: string, options?: any) {
        return WipApiFp(this.configuration).commitWip(owner, repository, msg, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary commit working in process to branch
     * @param {string} owner 
     * @param {string} repository 
     * @param {string} msg commit message
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WipApi
     */
    public commitWip_1(owner: string, repository: string, msg: string, options?: any) {
        return WipApiFp(this.configuration).commitWip_1(owner, repository, msg, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary remove working in process
     * @param {string} owner 
     * @param {string} repository 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WipApi
     */
    public deleteWip(owner: string, repository: string, options?: any) {
        return WipApiFp(this.configuration).deleteWip(owner, repository, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary remove working in process
     * @param {string} owner 
     * @param {string} repository 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WipApi
     */
    public deleteWip_2(owner: string, repository: string, options?: any) {
        return WipApiFp(this.configuration).deleteWip_2(owner, repository, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get working in process
     * @param {string} owner 
     * @param {string} repository 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WipApi
     */
    public getWip(owner: string, repository: string, options?: any) {
        return WipApiFp(this.configuration).getWip(owner, repository, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get working in process changes
     * @param {string} owner 
     * @param {string} repository 
     * @param {string} refName ref name
     * @param {string} [path] path
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WipApi
     */
    public getWipChanges(owner: string, repository: string, refName: string, path?: string, options?: any) {
        return WipApiFp(this.configuration).getWipChanges(owner, repository, refName, path, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get working in process changes
     * @param {string} owner 
     * @param {string} repository 
     * @param {string} refName ref name
     * @param {string} [path] path
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WipApi
     */
    public getWipChanges_3(owner: string, repository: string, refName: string, path?: string, options?: any) {
        return WipApiFp(this.configuration).getWipChanges_3(owner, repository, refName, path, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get working in process
     * @param {string} owner 
     * @param {string} repository 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WipApi
     */
    public getWip_4(owner: string, repository: string, options?: any) {
        return WipApiFp(this.configuration).getWip_4(owner, repository, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary list wip in specific project and user
     * @param {string} owner 
     * @param {string} repository 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WipApi
     */
    public listWip(owner: string, repository: string, options?: any) {
        return WipApiFp(this.configuration).listWip(owner, repository, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary list wip in specific project and user
     * @param {string} owner 
     * @param {string} repository 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WipApi
     */
    public listWip_5(owner: string, repository: string, options?: any) {
        return WipApiFp(this.configuration).listWip_5(owner, repository, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary revert changes in working in process, empty path will revert all
     * @param {string} owner 
     * @param {string} repository 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WipApi
     */
    public revertWipChanges(owner: string, repository: string, options?: any) {
        return WipApiFp(this.configuration).revertWipChanges(owner, repository, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary revert changes in working in process, empty path will revert all
     * @param {string} owner 
     * @param {string} repository 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WipApi
     */
    public revertWipChanges_6(owner: string, repository: string, options?: any) {
        return WipApiFp(this.configuration).revertWipChanges_6(owner, repository, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary update wip
     * @param {string} owner 
     * @param {string} repository 
     * @param {UpdateWip} [updateWip] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WipApi
     */
    public updateWip(owner: string, repository: string, updateWip?: UpdateWip, options?: any) {
        return WipApiFp(this.configuration).updateWip(owner, repository, updateWip, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary update wip
     * @param {string} owner 
     * @param {string} repository 
     * @param {UpdateWip} [updateWip] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof WipApi
     */
    public updateWip_7(owner: string, repository: string, updateWip?: UpdateWip, options?: any) {
        return WipApiFp(this.configuration).updateWip_7(owner, repository, updateWip, options).then((request) => request(this.axios, this.basePath));
    }

}
