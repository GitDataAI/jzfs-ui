// tslint:disable
/**
 * JZConsole
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


// @ts-ignore
import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Branch } from '../models';
// @ts-ignore
import { BranchCreation } from '../models';
// @ts-ignore
import { BranchList } from '../models';
/**
 * BranchesApi - axios parameter creator
 * @export
 */
export const BranchesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary create branch
         * @param {string} owner 
         * @param {string} repository 
         * @param {BranchCreation} [branchCreation] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBranch: async (owner: string, repository: string, branchCreation?: BranchCreation, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling createBranch.');
            }
            // verify required parameter 'repository' is not null or undefined
            if (repository === null || repository === undefined) {
                throw new RequiredError('repository','Required parameter repository was null or undefined when calling createBranch.');
            }
            const localVarPath = `/repos/{owner}/{repository}/branch`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"repository"}}`, encodeURIComponent(String(repository)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof branchCreation !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(branchCreation !== undefined ? branchCreation : {}) : (branchCreation || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary create branch
         * @param {string} owner 
         * @param {string} repository 
         * @param {BranchCreation} [branchCreation] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBranch_1: async (owner: string, repository: string, branchCreation?: BranchCreation, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling createBranch_1.');
            }
            // verify required parameter 'repository' is not null or undefined
            if (repository === null || repository === undefined) {
                throw new RequiredError('repository','Required parameter repository was null or undefined when calling createBranch_1.');
            }
            const localVarPath = `/repos/{owner}/{repository}/branch`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"repository"}}`, encodeURIComponent(String(repository)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof branchCreation !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(branchCreation !== undefined ? branchCreation : {}) : (branchCreation || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary delete branch
         * @param {string} owner 
         * @param {string} repository 
         * @param {string} refName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBranch: async (owner: string, repository: string, refName: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling deleteBranch.');
            }
            // verify required parameter 'repository' is not null or undefined
            if (repository === null || repository === undefined) {
                throw new RequiredError('repository','Required parameter repository was null or undefined when calling deleteBranch.');
            }
            // verify required parameter 'refName' is not null or undefined
            if (refName === null || refName === undefined) {
                throw new RequiredError('refName','Required parameter refName was null or undefined when calling deleteBranch.');
            }
            const localVarPath = `/repos/{owner}/{repository}/branch`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"repository"}}`, encodeURIComponent(String(repository)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (refName !== undefined) {
                localVarQueryParameter['refName'] = refName;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary delete branch
         * @param {string} owner 
         * @param {string} repository 
         * @param {string} refName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBranch_2: async (owner: string, repository: string, refName: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling deleteBranch_2.');
            }
            // verify required parameter 'repository' is not null or undefined
            if (repository === null || repository === undefined) {
                throw new RequiredError('repository','Required parameter repository was null or undefined when calling deleteBranch_2.');
            }
            // verify required parameter 'refName' is not null or undefined
            if (refName === null || refName === undefined) {
                throw new RequiredError('refName','Required parameter refName was null or undefined when calling deleteBranch_2.');
            }
            const localVarPath = `/repos/{owner}/{repository}/branch`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"repository"}}`, encodeURIComponent(String(repository)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (refName !== undefined) {
                localVarQueryParameter['refName'] = refName;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get branch
         * @param {string} owner 
         * @param {string} repository 
         * @param {string} refName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBranch: async (owner: string, repository: string, refName: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling getBranch.');
            }
            // verify required parameter 'repository' is not null or undefined
            if (repository === null || repository === undefined) {
                throw new RequiredError('repository','Required parameter repository was null or undefined when calling getBranch.');
            }
            // verify required parameter 'refName' is not null or undefined
            if (refName === null || refName === undefined) {
                throw new RequiredError('refName','Required parameter refName was null or undefined when calling getBranch.');
            }
            const localVarPath = `/repos/{owner}/{repository}/branch`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"repository"}}`, encodeURIComponent(String(repository)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (refName !== undefined) {
                localVarQueryParameter['refName'] = refName;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get branch
         * @param {string} owner 
         * @param {string} repository 
         * @param {string} refName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBranch_3: async (owner: string, repository: string, refName: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling getBranch_3.');
            }
            // verify required parameter 'repository' is not null or undefined
            if (repository === null || repository === undefined) {
                throw new RequiredError('repository','Required parameter repository was null or undefined when calling getBranch_3.');
            }
            // verify required parameter 'refName' is not null or undefined
            if (refName === null || refName === undefined) {
                throw new RequiredError('refName','Required parameter refName was null or undefined when calling getBranch_3.');
            }
            const localVarPath = `/repos/{owner}/{repository}/branch`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"repository"}}`, encodeURIComponent(String(repository)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (refName !== undefined) {
                localVarQueryParameter['refName'] = refName;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary list branches
         * @param {string} owner 
         * @param {string} repository 
         * @param {string} [prefix] return items prefixed with this value
         * @param {string} [after] return items after this value
         * @param {number} [amount] how many items to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBranches: async (owner: string, repository: string, prefix?: string, after?: string, amount?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling listBranches.');
            }
            // verify required parameter 'repository' is not null or undefined
            if (repository === null || repository === undefined) {
                throw new RequiredError('repository','Required parameter repository was null or undefined when calling listBranches.');
            }
            const localVarPath = `/repos/{owner}/{repository}/branches`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"repository"}}`, encodeURIComponent(String(repository)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (prefix !== undefined) {
                localVarQueryParameter['prefix'] = prefix;
            }

            if (after !== undefined) {
                localVarQueryParameter['after'] = after;
            }

            if (amount !== undefined) {
                localVarQueryParameter['amount'] = amount;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary list branches
         * @param {string} owner 
         * @param {string} repository 
         * @param {string} [prefix] return items prefixed with this value
         * @param {string} [after] return items after this value
         * @param {number} [amount] how many items to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBranches_4: async (owner: string, repository: string, prefix?: string, after?: string, amount?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling listBranches_4.');
            }
            // verify required parameter 'repository' is not null or undefined
            if (repository === null || repository === undefined) {
                throw new RequiredError('repository','Required parameter repository was null or undefined when calling listBranches_4.');
            }
            const localVarPath = `/repos/{owner}/{repository}/branches`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"repository"}}`, encodeURIComponent(String(repository)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (prefix !== undefined) {
                localVarQueryParameter['prefix'] = prefix;
            }

            if (after !== undefined) {
                localVarQueryParameter['after'] = after;
            }

            if (amount !== undefined) {
                localVarQueryParameter['amount'] = amount;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BranchesApi - functional programming interface
 * @export
 */
export const BranchesApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary create branch
         * @param {string} owner 
         * @param {string} repository 
         * @param {BranchCreation} [branchCreation] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBranch(owner: string, repository: string, branchCreation?: BranchCreation, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await BranchesApiAxiosParamCreator(configuration).createBranch(owner, repository, branchCreation, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary create branch
         * @param {string} owner 
         * @param {string} repository 
         * @param {BranchCreation} [branchCreation] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createBranch_1(owner: string, repository: string, branchCreation?: BranchCreation, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await BranchesApiAxiosParamCreator(configuration).createBranch_1(owner, repository, branchCreation, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary delete branch
         * @param {string} owner 
         * @param {string} repository 
         * @param {string} refName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBranch(owner: string, repository: string, refName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await BranchesApiAxiosParamCreator(configuration).deleteBranch(owner, repository, refName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary delete branch
         * @param {string} owner 
         * @param {string} repository 
         * @param {string} refName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteBranch_2(owner: string, repository: string, refName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await BranchesApiAxiosParamCreator(configuration).deleteBranch_2(owner, repository, refName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary get branch
         * @param {string} owner 
         * @param {string} repository 
         * @param {string} refName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBranch(owner: string, repository: string, refName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Branch>> {
            const localVarAxiosArgs = await BranchesApiAxiosParamCreator(configuration).getBranch(owner, repository, refName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary get branch
         * @param {string} owner 
         * @param {string} repository 
         * @param {string} refName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getBranch_3(owner: string, repository: string, refName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Branch>> {
            const localVarAxiosArgs = await BranchesApiAxiosParamCreator(configuration).getBranch_3(owner, repository, refName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary list branches
         * @param {string} owner 
         * @param {string} repository 
         * @param {string} [prefix] return items prefixed with this value
         * @param {string} [after] return items after this value
         * @param {number} [amount] how many items to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listBranches(owner: string, repository: string, prefix?: string, after?: string, amount?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BranchList>> {
            const localVarAxiosArgs = await BranchesApiAxiosParamCreator(configuration).listBranches(owner, repository, prefix, after, amount, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary list branches
         * @param {string} owner 
         * @param {string} repository 
         * @param {string} [prefix] return items prefixed with this value
         * @param {string} [after] return items after this value
         * @param {number} [amount] how many items to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listBranches_4(owner: string, repository: string, prefix?: string, after?: string, amount?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<BranchList>> {
            const localVarAxiosArgs = await BranchesApiAxiosParamCreator(configuration).listBranches_4(owner, repository, prefix, after, amount, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * BranchesApi - factory interface
 * @export
 */
export const BranchesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary create branch
         * @param {string} owner 
         * @param {string} repository 
         * @param {BranchCreation} [branchCreation] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBranch(owner: string, repository: string, branchCreation?: BranchCreation, options?: any): AxiosPromise<object> {
            return BranchesApiFp(configuration).createBranch(owner, repository, branchCreation, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary create branch
         * @param {string} owner 
         * @param {string} repository 
         * @param {BranchCreation} [branchCreation] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createBranch_1(owner: string, repository: string, branchCreation?: BranchCreation, options?: any): AxiosPromise<object> {
            return BranchesApiFp(configuration).createBranch_1(owner, repository, branchCreation, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary delete branch
         * @param {string} owner 
         * @param {string} repository 
         * @param {string} refName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBranch(owner: string, repository: string, refName: string, options?: any): AxiosPromise<object> {
            return BranchesApiFp(configuration).deleteBranch(owner, repository, refName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary delete branch
         * @param {string} owner 
         * @param {string} repository 
         * @param {string} refName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteBranch_2(owner: string, repository: string, refName: string, options?: any): AxiosPromise<object> {
            return BranchesApiFp(configuration).deleteBranch_2(owner, repository, refName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get branch
         * @param {string} owner 
         * @param {string} repository 
         * @param {string} refName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBranch(owner: string, repository: string, refName: string, options?: any): AxiosPromise<Branch> {
            return BranchesApiFp(configuration).getBranch(owner, repository, refName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get branch
         * @param {string} owner 
         * @param {string} repository 
         * @param {string} refName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getBranch_3(owner: string, repository: string, refName: string, options?: any): AxiosPromise<Branch> {
            return BranchesApiFp(configuration).getBranch_3(owner, repository, refName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary list branches
         * @param {string} owner 
         * @param {string} repository 
         * @param {string} [prefix] return items prefixed with this value
         * @param {string} [after] return items after this value
         * @param {number} [amount] how many items to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBranches(owner: string, repository: string, prefix?: string, after?: string, amount?: number, options?: any): AxiosPromise<BranchList> {
            return BranchesApiFp(configuration).listBranches(owner, repository, prefix, after, amount, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary list branches
         * @param {string} owner 
         * @param {string} repository 
         * @param {string} [prefix] return items prefixed with this value
         * @param {string} [after] return items after this value
         * @param {number} [amount] how many items to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listBranches_4(owner: string, repository: string, prefix?: string, after?: string, amount?: number, options?: any): AxiosPromise<BranchList> {
            return BranchesApiFp(configuration).listBranches_4(owner, repository, prefix, after, amount, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BranchesApi - object-oriented interface
 * @export
 * @class BranchesApi
 * @extends {BaseAPI}
 */
export class BranchesApi extends BaseAPI {
    /**
     * 
     * @summary create branch
     * @param {string} owner 
     * @param {string} repository 
     * @param {BranchCreation} [branchCreation] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BranchesApi
     */
    public createBranch(owner: string, repository: string, branchCreation?: BranchCreation, options?: any) {
        return BranchesApiFp(this.configuration).createBranch(owner, repository, branchCreation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary create branch
     * @param {string} owner 
     * @param {string} repository 
     * @param {BranchCreation} [branchCreation] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BranchesApi
     */
    public createBranch_1(owner: string, repository: string, branchCreation?: BranchCreation, options?: any) {
        return BranchesApiFp(this.configuration).createBranch_1(owner, repository, branchCreation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary delete branch
     * @param {string} owner 
     * @param {string} repository 
     * @param {string} refName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BranchesApi
     */
    public deleteBranch(owner: string, repository: string, refName: string, options?: any) {
        return BranchesApiFp(this.configuration).deleteBranch(owner, repository, refName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary delete branch
     * @param {string} owner 
     * @param {string} repository 
     * @param {string} refName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BranchesApi
     */
    public deleteBranch_2(owner: string, repository: string, refName: string, options?: any) {
        return BranchesApiFp(this.configuration).deleteBranch_2(owner, repository, refName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get branch
     * @param {string} owner 
     * @param {string} repository 
     * @param {string} refName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BranchesApi
     */
    public getBranch(owner: string, repository: string, refName: string, options?: any) {
        return BranchesApiFp(this.configuration).getBranch(owner, repository, refName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get branch
     * @param {string} owner 
     * @param {string} repository 
     * @param {string} refName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BranchesApi
     */
    public getBranch_3(owner: string, repository: string, refName: string, options?: any) {
        return BranchesApiFp(this.configuration).getBranch_3(owner, repository, refName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary list branches
     * @param {string} owner 
     * @param {string} repository 
     * @param {string} [prefix] return items prefixed with this value
     * @param {string} [after] return items after this value
     * @param {number} [amount] how many items to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BranchesApi
     */
    public listBranches(owner: string, repository: string, prefix?: string, after?: string, amount?: number, options?: any) {
        return BranchesApiFp(this.configuration).listBranches(owner, repository, prefix, after, amount, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary list branches
     * @param {string} owner 
     * @param {string} repository 
     * @param {string} [prefix] return items prefixed with this value
     * @param {string} [after] return items after this value
     * @param {number} [amount] how many items to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BranchesApi
     */
    public listBranches_4(owner: string, repository: string, prefix?: string, after?: string, amount?: number, options?: any) {
        return BranchesApiFp(this.configuration).listBranches_4(owner, repository, prefix, after, amount, options).then((request) => request(this.axios, this.basePath));
    }

}
