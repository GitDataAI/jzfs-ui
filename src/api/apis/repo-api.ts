// tslint:disable
/**
 * JZConsole
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


// @ts-ignore
import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Commit } from '../models';
// @ts-ignore
import { CreateRepository } from '../models';
// @ts-ignore
import { Repository } from '../models';
// @ts-ignore
import { RepositoryList } from '../models';
// @ts-ignore
import { UpdateRepository } from '../models';
/**
 * RepoApi - axios parameter creator
 * @export
 */
export const RepoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary change repository visible(true for public, false for private)
         * @param {string} owner 
         * @param {string} repository 
         * @param {boolean} visible 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeVisible: async (owner: string, repository: string, visible: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling changeVisible.');
            }
            // verify required parameter 'repository' is not null or undefined
            if (repository === null || repository === undefined) {
                throw new RequiredError('repository','Required parameter repository was null or undefined when calling changeVisible.');
            }
            // verify required parameter 'visible' is not null or undefined
            if (visible === null || visible === undefined) {
                throw new RequiredError('visible','Required parameter visible was null or undefined when calling changeVisible.');
            }
            const localVarPath = `/repos/{owner}/{repository}/visible`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"repository"}}`, encodeURIComponent(String(repository)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (visible !== undefined) {
                localVarQueryParameter['visible'] = visible;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary change repository visible(true for public, false for private)
         * @param {string} owner 
         * @param {string} repository 
         * @param {boolean} visible 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeVisible_1: async (owner: string, repository: string, visible: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling changeVisible_1.');
            }
            // verify required parameter 'repository' is not null or undefined
            if (repository === null || repository === undefined) {
                throw new RequiredError('repository','Required parameter repository was null or undefined when calling changeVisible_1.');
            }
            // verify required parameter 'visible' is not null or undefined
            if (visible === null || visible === undefined) {
                throw new RequiredError('visible','Required parameter visible was null or undefined when calling changeVisible_1.');
            }
            const localVarPath = `/repos/{owner}/{repository}/visible`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"repository"}}`, encodeURIComponent(String(repository)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (visible !== undefined) {
                localVarQueryParameter['visible'] = visible;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary create repository
         * @param {CreateRepository} [createRepository] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRepository: async (createRepository?: CreateRepository, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/repos`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof createRepository !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(createRepository !== undefined ? createRepository : {}) : (createRepository || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary create repository
         * @param {CreateRepository} [createRepository] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRepository_2: async (createRepository?: CreateRepository, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/repos`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof createRepository !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(createRepository !== undefined ? createRepository : {}) : (createRepository || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary delete repository
         * @param {string} owner 
         * @param {string} repository 
         * @param {boolean} [isCleanData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRepository: async (owner: string, repository: string, isCleanData?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling deleteRepository.');
            }
            // verify required parameter 'repository' is not null or undefined
            if (repository === null || repository === undefined) {
                throw new RequiredError('repository','Required parameter repository was null or undefined when calling deleteRepository.');
            }
            const localVarPath = `/repos/{owner}/{repository}`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"repository"}}`, encodeURIComponent(String(repository)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (isCleanData !== undefined) {
                localVarQueryParameter['is_clean_data'] = isCleanData;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary delete repository
         * @param {string} owner 
         * @param {string} repository 
         * @param {boolean} [isCleanData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRepository_3: async (owner: string, repository: string, isCleanData?: boolean, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling deleteRepository_3.');
            }
            // verify required parameter 'repository' is not null or undefined
            if (repository === null || repository === undefined) {
                throw new RequiredError('repository','Required parameter repository was null or undefined when calling deleteRepository_3.');
            }
            const localVarPath = `/repos/{owner}/{repository}`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"repository"}}`, encodeURIComponent(String(repository)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (isCleanData !== undefined) {
                localVarQueryParameter['is_clean_data'] = isCleanData;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get commits in ref
         * @param {string} owner 
         * @param {string} repository 
         * @param {number} [after] return items after this value
         * @param {number} [amount] how many items to return
         * @param {string} [refName] ref(branch/tag) name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCommitsInRef: async (owner: string, repository: string, after?: number, amount?: number, refName?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling getCommitsInRef.');
            }
            // verify required parameter 'repository' is not null or undefined
            if (repository === null || repository === undefined) {
                throw new RequiredError('repository','Required parameter repository was null or undefined when calling getCommitsInRef.');
            }
            const localVarPath = `/repos/{owner}/{repository}/commits`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"repository"}}`, encodeURIComponent(String(repository)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (after !== undefined) {
                localVarQueryParameter['after'] = after;
            }

            if (amount !== undefined) {
                localVarQueryParameter['amount'] = amount;
            }

            if (refName !== undefined) {
                localVarQueryParameter['refName'] = refName;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get commits in ref
         * @param {string} owner 
         * @param {string} repository 
         * @param {number} [after] return items after this value
         * @param {number} [amount] how many items to return
         * @param {string} [refName] ref(branch/tag) name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCommitsInRef_4: async (owner: string, repository: string, after?: number, amount?: number, refName?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling getCommitsInRef_4.');
            }
            // verify required parameter 'repository' is not null or undefined
            if (repository === null || repository === undefined) {
                throw new RequiredError('repository','Required parameter repository was null or undefined when calling getCommitsInRef_4.');
            }
            const localVarPath = `/repos/{owner}/{repository}/commits`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"repository"}}`, encodeURIComponent(String(repository)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (after !== undefined) {
                localVarQueryParameter['after'] = after;
            }

            if (amount !== undefined) {
                localVarQueryParameter['amount'] = amount;
            }

            if (refName !== undefined) {
                localVarQueryParameter['refName'] = refName;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get repository
         * @param {string} owner 
         * @param {string} repository 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRepository: async (owner: string, repository: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling getRepository.');
            }
            // verify required parameter 'repository' is not null or undefined
            if (repository === null || repository === undefined) {
                throw new RequiredError('repository','Required parameter repository was null or undefined when calling getRepository.');
            }
            const localVarPath = `/repos/{owner}/{repository}`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"repository"}}`, encodeURIComponent(String(repository)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get repository
         * @param {string} owner 
         * @param {string} repository 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRepository_5: async (owner: string, repository: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling getRepository_5.');
            }
            // verify required parameter 'repository' is not null or undefined
            if (repository === null || repository === undefined) {
                throw new RequiredError('repository','Required parameter repository was null or undefined when calling getRepository_5.');
            }
            const localVarPath = `/repos/{owner}/{repository}`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"repository"}}`, encodeURIComponent(String(repository)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary list public repository in all system
         * @param {string} [prefix] return items prefixed with this value
         * @param {number} [after] return items after this value
         * @param {number} [amount] how many items to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPublicRepository: async (prefix?: string, after?: number, amount?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/repos/public`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (prefix !== undefined) {
                localVarQueryParameter['prefix'] = prefix;
            }

            if (after !== undefined) {
                localVarQueryParameter['after'] = after;
            }

            if (amount !== undefined) {
                localVarQueryParameter['amount'] = amount;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary list public repository in all system
         * @param {string} [prefix] return items prefixed with this value
         * @param {number} [after] return items after this value
         * @param {number} [amount] how many items to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPublicRepository_6: async (prefix?: string, after?: number, amount?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/repos/public`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (prefix !== undefined) {
                localVarQueryParameter['prefix'] = prefix;
            }

            if (after !== undefined) {
                localVarQueryParameter['after'] = after;
            }

            if (amount !== undefined) {
                localVarQueryParameter['amount'] = amount;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary list repository in specific owner
         * @param {string} owner 
         * @param {string} [prefix] return items prefixed with this value
         * @param {number} [after] return items after this value
         * @param {number} [amount] how many items to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRepository: async (owner: string, prefix?: string, after?: number, amount?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling listRepository.');
            }
            const localVarPath = `/users/{owner}/repos`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (prefix !== undefined) {
                localVarQueryParameter['prefix'] = prefix;
            }

            if (after !== undefined) {
                localVarQueryParameter['after'] = after;
            }

            if (amount !== undefined) {
                localVarQueryParameter['amount'] = amount;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary list repository
         * @param {string} [prefix] return items prefixed with this value
         * @param {number} [after] return items after this value
         * @param {number} [amount] how many items to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRepositoryOfAuthenticatedUser: async (prefix?: string, after?: number, amount?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/repos`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (prefix !== undefined) {
                localVarQueryParameter['prefix'] = prefix;
            }

            if (after !== undefined) {
                localVarQueryParameter['after'] = after;
            }

            if (amount !== undefined) {
                localVarQueryParameter['amount'] = amount;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary list repository
         * @param {string} [prefix] return items prefixed with this value
         * @param {number} [after] return items after this value
         * @param {number} [amount] how many items to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRepositoryOfAuthenticatedUser_7: async (prefix?: string, after?: number, amount?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/users/repos`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (prefix !== undefined) {
                localVarQueryParameter['prefix'] = prefix;
            }

            if (after !== undefined) {
                localVarQueryParameter['after'] = after;
            }

            if (amount !== undefined) {
                localVarQueryParameter['amount'] = amount;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary list repository in specific owner
         * @param {string} owner 
         * @param {string} [prefix] return items prefixed with this value
         * @param {number} [after] return items after this value
         * @param {number} [amount] how many items to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRepository_8: async (owner: string, prefix?: string, after?: number, amount?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling listRepository_8.');
            }
            const localVarPath = `/users/{owner}/repos`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (prefix !== undefined) {
                localVarQueryParameter['prefix'] = prefix;
            }

            if (after !== undefined) {
                localVarQueryParameter['after'] = after;
            }

            if (amount !== undefined) {
                localVarQueryParameter['amount'] = amount;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary update repository
         * @param {string} owner 
         * @param {string} repository 
         * @param {UpdateRepository} [updateRepository] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRepository: async (owner: string, repository: string, updateRepository?: UpdateRepository, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling updateRepository.');
            }
            // verify required parameter 'repository' is not null or undefined
            if (repository === null || repository === undefined) {
                throw new RequiredError('repository','Required parameter repository was null or undefined when calling updateRepository.');
            }
            const localVarPath = `/repos/{owner}/{repository}`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"repository"}}`, encodeURIComponent(String(repository)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof updateRepository !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(updateRepository !== undefined ? updateRepository : {}) : (updateRepository || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary update repository
         * @param {string} owner 
         * @param {string} repository 
         * @param {UpdateRepository} [updateRepository] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRepository_9: async (owner: string, repository: string, updateRepository?: UpdateRepository, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling updateRepository_9.');
            }
            // verify required parameter 'repository' is not null or undefined
            if (repository === null || repository === undefined) {
                throw new RequiredError('repository','Required parameter repository was null or undefined when calling updateRepository_9.');
            }
            const localVarPath = `/repos/{owner}/{repository}`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"repository"}}`, encodeURIComponent(String(repository)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof updateRepository !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(updateRepository !== undefined ? updateRepository : {}) : (updateRepository || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RepoApi - functional programming interface
 * @export
 */
export const RepoApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary change repository visible(true for public, false for private)
         * @param {string} owner 
         * @param {string} repository 
         * @param {boolean} visible 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changeVisible(owner: string, repository: string, visible: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await RepoApiAxiosParamCreator(configuration).changeVisible(owner, repository, visible, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary change repository visible(true for public, false for private)
         * @param {string} owner 
         * @param {string} repository 
         * @param {boolean} visible 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async changeVisible_1(owner: string, repository: string, visible: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await RepoApiAxiosParamCreator(configuration).changeVisible_1(owner, repository, visible, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary create repository
         * @param {CreateRepository} [createRepository] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRepository(createRepository?: CreateRepository, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Repository>> {
            const localVarAxiosArgs = await RepoApiAxiosParamCreator(configuration).createRepository(createRepository, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary create repository
         * @param {CreateRepository} [createRepository] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createRepository_2(createRepository?: CreateRepository, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Repository>> {
            const localVarAxiosArgs = await RepoApiAxiosParamCreator(configuration).createRepository_2(createRepository, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary delete repository
         * @param {string} owner 
         * @param {string} repository 
         * @param {boolean} [isCleanData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRepository(owner: string, repository: string, isCleanData?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await RepoApiAxiosParamCreator(configuration).deleteRepository(owner, repository, isCleanData, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary delete repository
         * @param {string} owner 
         * @param {string} repository 
         * @param {boolean} [isCleanData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteRepository_3(owner: string, repository: string, isCleanData?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await RepoApiAxiosParamCreator(configuration).deleteRepository_3(owner, repository, isCleanData, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary get commits in ref
         * @param {string} owner 
         * @param {string} repository 
         * @param {number} [after] return items after this value
         * @param {number} [amount] how many items to return
         * @param {string} [refName] ref(branch/tag) name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCommitsInRef(owner: string, repository: string, after?: number, amount?: number, refName?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Commit>>> {
            const localVarAxiosArgs = await RepoApiAxiosParamCreator(configuration).getCommitsInRef(owner, repository, after, amount, refName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary get commits in ref
         * @param {string} owner 
         * @param {string} repository 
         * @param {number} [after] return items after this value
         * @param {number} [amount] how many items to return
         * @param {string} [refName] ref(branch/tag) name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCommitsInRef_4(owner: string, repository: string, after?: number, amount?: number, refName?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Commit>>> {
            const localVarAxiosArgs = await RepoApiAxiosParamCreator(configuration).getCommitsInRef_4(owner, repository, after, amount, refName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary get repository
         * @param {string} owner 
         * @param {string} repository 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRepository(owner: string, repository: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Repository>> {
            const localVarAxiosArgs = await RepoApiAxiosParamCreator(configuration).getRepository(owner, repository, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary get repository
         * @param {string} owner 
         * @param {string} repository 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getRepository_5(owner: string, repository: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Repository>> {
            const localVarAxiosArgs = await RepoApiAxiosParamCreator(configuration).getRepository_5(owner, repository, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary list public repository in all system
         * @param {string} [prefix] return items prefixed with this value
         * @param {number} [after] return items after this value
         * @param {number} [amount] how many items to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPublicRepository(prefix?: string, after?: number, amount?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RepositoryList>> {
            const localVarAxiosArgs = await RepoApiAxiosParamCreator(configuration).listPublicRepository(prefix, after, amount, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary list public repository in all system
         * @param {string} [prefix] return items prefixed with this value
         * @param {number} [after] return items after this value
         * @param {number} [amount] how many items to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPublicRepository_6(prefix?: string, after?: number, amount?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RepositoryList>> {
            const localVarAxiosArgs = await RepoApiAxiosParamCreator(configuration).listPublicRepository_6(prefix, after, amount, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary list repository in specific owner
         * @param {string} owner 
         * @param {string} [prefix] return items prefixed with this value
         * @param {number} [after] return items after this value
         * @param {number} [amount] how many items to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listRepository(owner: string, prefix?: string, after?: number, amount?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RepositoryList>> {
            const localVarAxiosArgs = await RepoApiAxiosParamCreator(configuration).listRepository(owner, prefix, after, amount, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary list repository
         * @param {string} [prefix] return items prefixed with this value
         * @param {number} [after] return items after this value
         * @param {number} [amount] how many items to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listRepositoryOfAuthenticatedUser(prefix?: string, after?: number, amount?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RepositoryList>> {
            const localVarAxiosArgs = await RepoApiAxiosParamCreator(configuration).listRepositoryOfAuthenticatedUser(prefix, after, amount, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary list repository
         * @param {string} [prefix] return items prefixed with this value
         * @param {number} [after] return items after this value
         * @param {number} [amount] how many items to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listRepositoryOfAuthenticatedUser_7(prefix?: string, after?: number, amount?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RepositoryList>> {
            const localVarAxiosArgs = await RepoApiAxiosParamCreator(configuration).listRepositoryOfAuthenticatedUser_7(prefix, after, amount, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary list repository in specific owner
         * @param {string} owner 
         * @param {string} [prefix] return items prefixed with this value
         * @param {number} [after] return items after this value
         * @param {number} [amount] how many items to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listRepository_8(owner: string, prefix?: string, after?: number, amount?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RepositoryList>> {
            const localVarAxiosArgs = await RepoApiAxiosParamCreator(configuration).listRepository_8(owner, prefix, after, amount, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary update repository
         * @param {string} owner 
         * @param {string} repository 
         * @param {UpdateRepository} [updateRepository] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRepository(owner: string, repository: string, updateRepository?: UpdateRepository, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await RepoApiAxiosParamCreator(configuration).updateRepository(owner, repository, updateRepository, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary update repository
         * @param {string} owner 
         * @param {string} repository 
         * @param {UpdateRepository} [updateRepository] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateRepository_9(owner: string, repository: string, updateRepository?: UpdateRepository, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await RepoApiAxiosParamCreator(configuration).updateRepository_9(owner, repository, updateRepository, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * RepoApi - factory interface
 * @export
 */
export const RepoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary change repository visible(true for public, false for private)
         * @param {string} owner 
         * @param {string} repository 
         * @param {boolean} visible 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeVisible(owner: string, repository: string, visible: boolean, options?: any): AxiosPromise<object> {
            return RepoApiFp(configuration).changeVisible(owner, repository, visible, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary change repository visible(true for public, false for private)
         * @param {string} owner 
         * @param {string} repository 
         * @param {boolean} visible 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changeVisible_1(owner: string, repository: string, visible: boolean, options?: any): AxiosPromise<object> {
            return RepoApiFp(configuration).changeVisible_1(owner, repository, visible, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary create repository
         * @param {CreateRepository} [createRepository] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRepository(createRepository?: CreateRepository, options?: any): AxiosPromise<Repository> {
            return RepoApiFp(configuration).createRepository(createRepository, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary create repository
         * @param {CreateRepository} [createRepository] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createRepository_2(createRepository?: CreateRepository, options?: any): AxiosPromise<Repository> {
            return RepoApiFp(configuration).createRepository_2(createRepository, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary delete repository
         * @param {string} owner 
         * @param {string} repository 
         * @param {boolean} [isCleanData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRepository(owner: string, repository: string, isCleanData?: boolean, options?: any): AxiosPromise<object> {
            return RepoApiFp(configuration).deleteRepository(owner, repository, isCleanData, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary delete repository
         * @param {string} owner 
         * @param {string} repository 
         * @param {boolean} [isCleanData] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteRepository_3(owner: string, repository: string, isCleanData?: boolean, options?: any): AxiosPromise<object> {
            return RepoApiFp(configuration).deleteRepository_3(owner, repository, isCleanData, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get commits in ref
         * @param {string} owner 
         * @param {string} repository 
         * @param {number} [after] return items after this value
         * @param {number} [amount] how many items to return
         * @param {string} [refName] ref(branch/tag) name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCommitsInRef(owner: string, repository: string, after?: number, amount?: number, refName?: string, options?: any): AxiosPromise<Array<Commit>> {
            return RepoApiFp(configuration).getCommitsInRef(owner, repository, after, amount, refName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get commits in ref
         * @param {string} owner 
         * @param {string} repository 
         * @param {number} [after] return items after this value
         * @param {number} [amount] how many items to return
         * @param {string} [refName] ref(branch/tag) name
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCommitsInRef_4(owner: string, repository: string, after?: number, amount?: number, refName?: string, options?: any): AxiosPromise<Array<Commit>> {
            return RepoApiFp(configuration).getCommitsInRef_4(owner, repository, after, amount, refName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get repository
         * @param {string} owner 
         * @param {string} repository 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRepository(owner: string, repository: string, options?: any): AxiosPromise<Repository> {
            return RepoApiFp(configuration).getRepository(owner, repository, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get repository
         * @param {string} owner 
         * @param {string} repository 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRepository_5(owner: string, repository: string, options?: any): AxiosPromise<Repository> {
            return RepoApiFp(configuration).getRepository_5(owner, repository, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary list public repository in all system
         * @param {string} [prefix] return items prefixed with this value
         * @param {number} [after] return items after this value
         * @param {number} [amount] how many items to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPublicRepository(prefix?: string, after?: number, amount?: number, options?: any): AxiosPromise<RepositoryList> {
            return RepoApiFp(configuration).listPublicRepository(prefix, after, amount, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary list public repository in all system
         * @param {string} [prefix] return items prefixed with this value
         * @param {number} [after] return items after this value
         * @param {number} [amount] how many items to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPublicRepository_6(prefix?: string, after?: number, amount?: number, options?: any): AxiosPromise<RepositoryList> {
            return RepoApiFp(configuration).listPublicRepository_6(prefix, after, amount, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary list repository in specific owner
         * @param {string} owner 
         * @param {string} [prefix] return items prefixed with this value
         * @param {number} [after] return items after this value
         * @param {number} [amount] how many items to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRepository(owner: string, prefix?: string, after?: number, amount?: number, options?: any): AxiosPromise<RepositoryList> {
            return RepoApiFp(configuration).listRepository(owner, prefix, after, amount, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary list repository
         * @param {string} [prefix] return items prefixed with this value
         * @param {number} [after] return items after this value
         * @param {number} [amount] how many items to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRepositoryOfAuthenticatedUser(prefix?: string, after?: number, amount?: number, options?: any): AxiosPromise<RepositoryList> {
            return RepoApiFp(configuration).listRepositoryOfAuthenticatedUser(prefix, after, amount, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary list repository
         * @param {string} [prefix] return items prefixed with this value
         * @param {number} [after] return items after this value
         * @param {number} [amount] how many items to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRepositoryOfAuthenticatedUser_7(prefix?: string, after?: number, amount?: number, options?: any): AxiosPromise<RepositoryList> {
            return RepoApiFp(configuration).listRepositoryOfAuthenticatedUser_7(prefix, after, amount, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary list repository in specific owner
         * @param {string} owner 
         * @param {string} [prefix] return items prefixed with this value
         * @param {number} [after] return items after this value
         * @param {number} [amount] how many items to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listRepository_8(owner: string, prefix?: string, after?: number, amount?: number, options?: any): AxiosPromise<RepositoryList> {
            return RepoApiFp(configuration).listRepository_8(owner, prefix, after, amount, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary update repository
         * @param {string} owner 
         * @param {string} repository 
         * @param {UpdateRepository} [updateRepository] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRepository(owner: string, repository: string, updateRepository?: UpdateRepository, options?: any): AxiosPromise<object> {
            return RepoApiFp(configuration).updateRepository(owner, repository, updateRepository, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary update repository
         * @param {string} owner 
         * @param {string} repository 
         * @param {UpdateRepository} [updateRepository] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateRepository_9(owner: string, repository: string, updateRepository?: UpdateRepository, options?: any): AxiosPromise<object> {
            return RepoApiFp(configuration).updateRepository_9(owner, repository, updateRepository, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RepoApi - object-oriented interface
 * @export
 * @class RepoApi
 * @extends {BaseAPI}
 */
export class RepoApi extends BaseAPI {
    /**
     * 
     * @summary change repository visible(true for public, false for private)
     * @param {string} owner 
     * @param {string} repository 
     * @param {boolean} visible 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RepoApi
     */
    public changeVisible(owner: string, repository: string, visible: boolean, options?: any) {
        return RepoApiFp(this.configuration).changeVisible(owner, repository, visible, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary change repository visible(true for public, false for private)
     * @param {string} owner 
     * @param {string} repository 
     * @param {boolean} visible 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RepoApi
     */
    public changeVisible_1(owner: string, repository: string, visible: boolean, options?: any) {
        return RepoApiFp(this.configuration).changeVisible_1(owner, repository, visible, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary create repository
     * @param {CreateRepository} [createRepository] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RepoApi
     */
    public createRepository(createRepository?: CreateRepository, options?: any) {
        return RepoApiFp(this.configuration).createRepository(createRepository, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary create repository
     * @param {CreateRepository} [createRepository] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RepoApi
     */
    public createRepository_2(createRepository?: CreateRepository, options?: any) {
        return RepoApiFp(this.configuration).createRepository_2(createRepository, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary delete repository
     * @param {string} owner 
     * @param {string} repository 
     * @param {boolean} [isCleanData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RepoApi
     */
    public deleteRepository(owner: string, repository: string, isCleanData?: boolean, options?: any) {
        return RepoApiFp(this.configuration).deleteRepository(owner, repository, isCleanData, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary delete repository
     * @param {string} owner 
     * @param {string} repository 
     * @param {boolean} [isCleanData] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RepoApi
     */
    public deleteRepository_3(owner: string, repository: string, isCleanData?: boolean, options?: any) {
        return RepoApiFp(this.configuration).deleteRepository_3(owner, repository, isCleanData, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get commits in ref
     * @param {string} owner 
     * @param {string} repository 
     * @param {number} [after] return items after this value
     * @param {number} [amount] how many items to return
     * @param {string} [refName] ref(branch/tag) name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RepoApi
     */
    public getCommitsInRef(owner: string, repository: string, after?: number, amount?: number, refName?: string, options?: any) {
        return RepoApiFp(this.configuration).getCommitsInRef(owner, repository, after, amount, refName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get commits in ref
     * @param {string} owner 
     * @param {string} repository 
     * @param {number} [after] return items after this value
     * @param {number} [amount] how many items to return
     * @param {string} [refName] ref(branch/tag) name
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RepoApi
     */
    public getCommitsInRef_4(owner: string, repository: string, after?: number, amount?: number, refName?: string, options?: any) {
        return RepoApiFp(this.configuration).getCommitsInRef_4(owner, repository, after, amount, refName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get repository
     * @param {string} owner 
     * @param {string} repository 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RepoApi
     */
    public getRepository(owner: string, repository: string, options?: any) {
        return RepoApiFp(this.configuration).getRepository(owner, repository, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get repository
     * @param {string} owner 
     * @param {string} repository 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RepoApi
     */
    public getRepository_5(owner: string, repository: string, options?: any) {
        return RepoApiFp(this.configuration).getRepository_5(owner, repository, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary list public repository in all system
     * @param {string} [prefix] return items prefixed with this value
     * @param {number} [after] return items after this value
     * @param {number} [amount] how many items to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RepoApi
     */
    public listPublicRepository(prefix?: string, after?: number, amount?: number, options?: any) {
        return RepoApiFp(this.configuration).listPublicRepository(prefix, after, amount, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary list public repository in all system
     * @param {string} [prefix] return items prefixed with this value
     * @param {number} [after] return items after this value
     * @param {number} [amount] how many items to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RepoApi
     */
    public listPublicRepository_6(prefix?: string, after?: number, amount?: number, options?: any) {
        return RepoApiFp(this.configuration).listPublicRepository_6(prefix, after, amount, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary list repository in specific owner
     * @param {string} owner 
     * @param {string} [prefix] return items prefixed with this value
     * @param {number} [after] return items after this value
     * @param {number} [amount] how many items to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RepoApi
     */
    public listRepository(owner: string, prefix?: string, after?: number, amount?: number, options?: any) {
        return RepoApiFp(this.configuration).listRepository(owner, prefix, after, amount, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary list repository
     * @param {string} [prefix] return items prefixed with this value
     * @param {number} [after] return items after this value
     * @param {number} [amount] how many items to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RepoApi
     */
    public listRepositoryOfAuthenticatedUser(prefix?: string, after?: number, amount?: number, options?: any) {
        return RepoApiFp(this.configuration).listRepositoryOfAuthenticatedUser(prefix, after, amount, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary list repository
     * @param {string} [prefix] return items prefixed with this value
     * @param {number} [after] return items after this value
     * @param {number} [amount] how many items to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RepoApi
     */
    public listRepositoryOfAuthenticatedUser_7(prefix?: string, after?: number, amount?: number, options?: any) {
        return RepoApiFp(this.configuration).listRepositoryOfAuthenticatedUser_7(prefix, after, amount, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary list repository in specific owner
     * @param {string} owner 
     * @param {string} [prefix] return items prefixed with this value
     * @param {number} [after] return items after this value
     * @param {number} [amount] how many items to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RepoApi
     */
    public listRepository_8(owner: string, prefix?: string, after?: number, amount?: number, options?: any) {
        return RepoApiFp(this.configuration).listRepository_8(owner, prefix, after, amount, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary update repository
     * @param {string} owner 
     * @param {string} repository 
     * @param {UpdateRepository} [updateRepository] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RepoApi
     */
    public updateRepository(owner: string, repository: string, updateRepository?: UpdateRepository, options?: any) {
        return RepoApiFp(this.configuration).updateRepository(owner, repository, updateRepository, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary update repository
     * @param {string} owner 
     * @param {string} repository 
     * @param {UpdateRepository} [updateRepository] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RepoApi
     */
    public updateRepository_9(owner: string, repository: string, updateRepository?: UpdateRepository, options?: any) {
        return RepoApiFp(this.configuration).updateRepository_9(owner, repository, updateRepository, options).then((request) => request(this.axios, this.basePath));
    }

}
