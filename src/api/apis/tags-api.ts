// tslint:disable
/**
 * JZConsole
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


// @ts-ignore
import * as globalImportUrl from 'url';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
// @ts-ignore
import { Tag } from '../models';
// @ts-ignore
import { TagCreation } from '../models';
// @ts-ignore
import { TagList } from '../models';
/**
 * TagsApi - axios parameter creator
 * @export
 */
export const TagsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary create tag
         * @param {string} owner 
         * @param {string} repository 
         * @param {TagCreation} [tagCreation] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTag: async (owner: string, repository: string, tagCreation?: TagCreation, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling createTag.');
            }
            // verify required parameter 'repository' is not null or undefined
            if (repository === null || repository === undefined) {
                throw new RequiredError('repository','Required parameter repository was null or undefined when calling createTag.');
            }
            const localVarPath = `/repos/{owner}/{repository}/tag`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"repository"}}`, encodeURIComponent(String(repository)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof tagCreation !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(tagCreation !== undefined ? tagCreation : {}) : (tagCreation || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary create tag
         * @param {string} owner 
         * @param {string} repository 
         * @param {TagCreation} [tagCreation] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTag_1: async (owner: string, repository: string, tagCreation?: TagCreation, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling createTag_1.');
            }
            // verify required parameter 'repository' is not null or undefined
            if (repository === null || repository === undefined) {
                throw new RequiredError('repository','Required parameter repository was null or undefined when calling createTag_1.');
            }
            const localVarPath = `/repos/{owner}/{repository}/tag`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"repository"}}`, encodeURIComponent(String(repository)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof tagCreation !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(tagCreation !== undefined ? tagCreation : {}) : (tagCreation || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary delete tag
         * @param {string} owner 
         * @param {string} repository 
         * @param {string} refName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTag: async (owner: string, repository: string, refName: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling deleteTag.');
            }
            // verify required parameter 'repository' is not null or undefined
            if (repository === null || repository === undefined) {
                throw new RequiredError('repository','Required parameter repository was null or undefined when calling deleteTag.');
            }
            // verify required parameter 'refName' is not null or undefined
            if (refName === null || refName === undefined) {
                throw new RequiredError('refName','Required parameter refName was null or undefined when calling deleteTag.');
            }
            const localVarPath = `/repos/{owner}/{repository}/tag`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"repository"}}`, encodeURIComponent(String(repository)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (refName !== undefined) {
                localVarQueryParameter['refName'] = refName;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary delete tag
         * @param {string} owner 
         * @param {string} repository 
         * @param {string} refName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTag_2: async (owner: string, repository: string, refName: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling deleteTag_2.');
            }
            // verify required parameter 'repository' is not null or undefined
            if (repository === null || repository === undefined) {
                throw new RequiredError('repository','Required parameter repository was null or undefined when calling deleteTag_2.');
            }
            // verify required parameter 'refName' is not null or undefined
            if (refName === null || refName === undefined) {
                throw new RequiredError('refName','Required parameter refName was null or undefined when calling deleteTag_2.');
            }
            const localVarPath = `/repos/{owner}/{repository}/tag`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"repository"}}`, encodeURIComponent(String(repository)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (refName !== undefined) {
                localVarQueryParameter['refName'] = refName;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get tag
         * @param {string} owner 
         * @param {string} repository 
         * @param {string} refName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTag: async (owner: string, repository: string, refName: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling getTag.');
            }
            // verify required parameter 'repository' is not null or undefined
            if (repository === null || repository === undefined) {
                throw new RequiredError('repository','Required parameter repository was null or undefined when calling getTag.');
            }
            // verify required parameter 'refName' is not null or undefined
            if (refName === null || refName === undefined) {
                throw new RequiredError('refName','Required parameter refName was null or undefined when calling getTag.');
            }
            const localVarPath = `/repos/{owner}/{repository}/tag`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"repository"}}`, encodeURIComponent(String(repository)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (refName !== undefined) {
                localVarQueryParameter['refName'] = refName;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary get tag
         * @param {string} owner 
         * @param {string} repository 
         * @param {string} refName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTag_3: async (owner: string, repository: string, refName: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling getTag_3.');
            }
            // verify required parameter 'repository' is not null or undefined
            if (repository === null || repository === undefined) {
                throw new RequiredError('repository','Required parameter repository was null or undefined when calling getTag_3.');
            }
            // verify required parameter 'refName' is not null or undefined
            if (refName === null || refName === undefined) {
                throw new RequiredError('refName','Required parameter refName was null or undefined when calling getTag_3.');
            }
            const localVarPath = `/repos/{owner}/{repository}/tag`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"repository"}}`, encodeURIComponent(String(repository)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (refName !== undefined) {
                localVarQueryParameter['refName'] = refName;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary list tags
         * @param {string} owner 
         * @param {string} repository 
         * @param {string} [prefix] return items prefixed with this value
         * @param {number} [after] return items after this value
         * @param {number} [amount] how many items to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTags: async (owner: string, repository: string, prefix?: string, after?: number, amount?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling listTags.');
            }
            // verify required parameter 'repository' is not null or undefined
            if (repository === null || repository === undefined) {
                throw new RequiredError('repository','Required parameter repository was null or undefined when calling listTags.');
            }
            const localVarPath = `/repos/{owner}/{repository}/tags`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"repository"}}`, encodeURIComponent(String(repository)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (prefix !== undefined) {
                localVarQueryParameter['prefix'] = prefix;
            }

            if (after !== undefined) {
                localVarQueryParameter['after'] = after;
            }

            if (amount !== undefined) {
                localVarQueryParameter['amount'] = amount;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary list tags
         * @param {string} owner 
         * @param {string} repository 
         * @param {string} [prefix] return items prefixed with this value
         * @param {number} [after] return items after this value
         * @param {number} [amount] how many items to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTags_4: async (owner: string, repository: string, prefix?: string, after?: number, amount?: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'owner' is not null or undefined
            if (owner === null || owner === undefined) {
                throw new RequiredError('owner','Required parameter owner was null or undefined when calling listTags_4.');
            }
            // verify required parameter 'repository' is not null or undefined
            if (repository === null || repository === undefined) {
                throw new RequiredError('repository','Required parameter repository was null or undefined when calling listTags_4.');
            }
            const localVarPath = `/repos/{owner}/{repository}/tags`
                .replace(`{${"owner"}}`, encodeURIComponent(String(owner)))
                .replace(`{${"repository"}}`, encodeURIComponent(String(repository)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (prefix !== undefined) {
                localVarQueryParameter['prefix'] = prefix;
            }

            if (after !== undefined) {
                localVarQueryParameter['after'] = after;
            }

            if (amount !== undefined) {
                localVarQueryParameter['amount'] = amount;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TagsApi - functional programming interface
 * @export
 */
export const TagsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary create tag
         * @param {string} owner 
         * @param {string} repository 
         * @param {TagCreation} [tagCreation] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTag(owner: string, repository: string, tagCreation?: TagCreation, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await TagsApiAxiosParamCreator(configuration).createTag(owner, repository, tagCreation, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary create tag
         * @param {string} owner 
         * @param {string} repository 
         * @param {TagCreation} [tagCreation] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createTag_1(owner: string, repository: string, tagCreation?: TagCreation, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await TagsApiAxiosParamCreator(configuration).createTag_1(owner, repository, tagCreation, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary delete tag
         * @param {string} owner 
         * @param {string} repository 
         * @param {string} refName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTag(owner: string, repository: string, refName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await TagsApiAxiosParamCreator(configuration).deleteTag(owner, repository, refName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary delete tag
         * @param {string} owner 
         * @param {string} repository 
         * @param {string} refName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTag_2(owner: string, repository: string, refName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<object>> {
            const localVarAxiosArgs = await TagsApiAxiosParamCreator(configuration).deleteTag_2(owner, repository, refName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary get tag
         * @param {string} owner 
         * @param {string} repository 
         * @param {string} refName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTag(owner: string, repository: string, refName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tag>> {
            const localVarAxiosArgs = await TagsApiAxiosParamCreator(configuration).getTag(owner, repository, refName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary get tag
         * @param {string} owner 
         * @param {string} repository 
         * @param {string} refName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTag_3(owner: string, repository: string, refName: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Tag>> {
            const localVarAxiosArgs = await TagsApiAxiosParamCreator(configuration).getTag_3(owner, repository, refName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary list tags
         * @param {string} owner 
         * @param {string} repository 
         * @param {string} [prefix] return items prefixed with this value
         * @param {number} [after] return items after this value
         * @param {number} [amount] how many items to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTags(owner: string, repository: string, prefix?: string, after?: number, amount?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagList>> {
            const localVarAxiosArgs = await TagsApiAxiosParamCreator(configuration).listTags(owner, repository, prefix, after, amount, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary list tags
         * @param {string} owner 
         * @param {string} repository 
         * @param {string} [prefix] return items prefixed with this value
         * @param {number} [after] return items after this value
         * @param {number} [amount] how many items to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTags_4(owner: string, repository: string, prefix?: string, after?: number, amount?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TagList>> {
            const localVarAxiosArgs = await TagsApiAxiosParamCreator(configuration).listTags_4(owner, repository, prefix, after, amount, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * TagsApi - factory interface
 * @export
 */
export const TagsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary create tag
         * @param {string} owner 
         * @param {string} repository 
         * @param {TagCreation} [tagCreation] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTag(owner: string, repository: string, tagCreation?: TagCreation, options?: any): AxiosPromise<object> {
            return TagsApiFp(configuration).createTag(owner, repository, tagCreation, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary create tag
         * @param {string} owner 
         * @param {string} repository 
         * @param {TagCreation} [tagCreation] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTag_1(owner: string, repository: string, tagCreation?: TagCreation, options?: any): AxiosPromise<object> {
            return TagsApiFp(configuration).createTag_1(owner, repository, tagCreation, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary delete tag
         * @param {string} owner 
         * @param {string} repository 
         * @param {string} refName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTag(owner: string, repository: string, refName: string, options?: any): AxiosPromise<object> {
            return TagsApiFp(configuration).deleteTag(owner, repository, refName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary delete tag
         * @param {string} owner 
         * @param {string} repository 
         * @param {string} refName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTag_2(owner: string, repository: string, refName: string, options?: any): AxiosPromise<object> {
            return TagsApiFp(configuration).deleteTag_2(owner, repository, refName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get tag
         * @param {string} owner 
         * @param {string} repository 
         * @param {string} refName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTag(owner: string, repository: string, refName: string, options?: any): AxiosPromise<Tag> {
            return TagsApiFp(configuration).getTag(owner, repository, refName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary get tag
         * @param {string} owner 
         * @param {string} repository 
         * @param {string} refName 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTag_3(owner: string, repository: string, refName: string, options?: any): AxiosPromise<Tag> {
            return TagsApiFp(configuration).getTag_3(owner, repository, refName, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary list tags
         * @param {string} owner 
         * @param {string} repository 
         * @param {string} [prefix] return items prefixed with this value
         * @param {number} [after] return items after this value
         * @param {number} [amount] how many items to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTags(owner: string, repository: string, prefix?: string, after?: number, amount?: number, options?: any): AxiosPromise<TagList> {
            return TagsApiFp(configuration).listTags(owner, repository, prefix, after, amount, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary list tags
         * @param {string} owner 
         * @param {string} repository 
         * @param {string} [prefix] return items prefixed with this value
         * @param {number} [after] return items after this value
         * @param {number} [amount] how many items to return
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTags_4(owner: string, repository: string, prefix?: string, after?: number, amount?: number, options?: any): AxiosPromise<TagList> {
            return TagsApiFp(configuration).listTags_4(owner, repository, prefix, after, amount, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TagsApi - object-oriented interface
 * @export
 * @class TagsApi
 * @extends {BaseAPI}
 */
export class TagsApi extends BaseAPI {
    /**
     * 
     * @summary create tag
     * @param {string} owner 
     * @param {string} repository 
     * @param {TagCreation} [tagCreation] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    public createTag(owner: string, repository: string, tagCreation?: TagCreation, options?: any) {
        return TagsApiFp(this.configuration).createTag(owner, repository, tagCreation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary create tag
     * @param {string} owner 
     * @param {string} repository 
     * @param {TagCreation} [tagCreation] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    public createTag_1(owner: string, repository: string, tagCreation?: TagCreation, options?: any) {
        return TagsApiFp(this.configuration).createTag_1(owner, repository, tagCreation, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary delete tag
     * @param {string} owner 
     * @param {string} repository 
     * @param {string} refName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    public deleteTag(owner: string, repository: string, refName: string, options?: any) {
        return TagsApiFp(this.configuration).deleteTag(owner, repository, refName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary delete tag
     * @param {string} owner 
     * @param {string} repository 
     * @param {string} refName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    public deleteTag_2(owner: string, repository: string, refName: string, options?: any) {
        return TagsApiFp(this.configuration).deleteTag_2(owner, repository, refName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get tag
     * @param {string} owner 
     * @param {string} repository 
     * @param {string} refName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    public getTag(owner: string, repository: string, refName: string, options?: any) {
        return TagsApiFp(this.configuration).getTag(owner, repository, refName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary get tag
     * @param {string} owner 
     * @param {string} repository 
     * @param {string} refName 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    public getTag_3(owner: string, repository: string, refName: string, options?: any) {
        return TagsApiFp(this.configuration).getTag_3(owner, repository, refName, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary list tags
     * @param {string} owner 
     * @param {string} repository 
     * @param {string} [prefix] return items prefixed with this value
     * @param {number} [after] return items after this value
     * @param {number} [amount] how many items to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    public listTags(owner: string, repository: string, prefix?: string, after?: number, amount?: number, options?: any) {
        return TagsApiFp(this.configuration).listTags(owner, repository, prefix, after, amount, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary list tags
     * @param {string} owner 
     * @param {string} repository 
     * @param {string} [prefix] return items prefixed with this value
     * @param {number} [after] return items after this value
     * @param {number} [amount] how many items to return
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TagsApi
     */
    public listTags_4(owner: string, repository: string, prefix?: string, after?: number, amount?: number, options?: any) {
        return TagsApiFp(this.configuration).listTags_4(owner, repository, prefix, after, amount, options).then((request) => request(this.axios, this.basePath));
    }

}
